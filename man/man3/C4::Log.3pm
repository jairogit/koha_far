.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "C4::Log 3"
.TH C4::Log 3 "2015-11-02" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Log \- Koha Log Facility functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use C4::Log;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The functions in this module perform various functions in order to log all the operations done on the Database, including deleting and undeleting books, adding/editing members, etc.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "logaction" 2
.IX Item "logaction"
.Vb 1
\&  &logaction($modulename, $actionname, $objectnumber, $infos);
.Ve
.Sp
Adds a record into action_logs table to report the different changes upon the database.
Each log entry includes the number of the user currently logged in.  For batch
jobs, which operate without authenticating a user and setting up a session, the user
number is set to 0, which is the same as the superlibrarian's number.
.IP "GetLogStatus" 2
.IX Item "GetLogStatus"
.Vb 1
\&  $status = GetLogStatus;
.Ve
.Sp
\&\f(CW$status\fR is a hasref like this example:
    \f(CW$hash\fR = {
        BorrowersLog   => 1,
        CataloguingLog => 0,
        IssueLog       => 0,
        ...
    }
.IP "displaylog" 2
.IX Item "displaylog"
.Vb 5
\&  &displaylog($modulename, @filters);
\&  $modulename is the name of the module on which the user wants to display logs
\&  @filters is an optional table of hash containing :
\&      \- name : the name of the variable to filter
\&    \- value : the value of the filter.... May be with * joker
.Ve
.Sp
returns a table of hash containing who did what on which object at what time
.IP "GetLogs" 2
.IX Item "GetLogs"
\&\f(CW$logs\fR = GetLogs($datefrom,$dateto,$user,\e@modules,$action,$object,$info);
.Sp
Return: 
\&\f(CW$logs\fR is a ref to a hash which containts all columns from action_logs
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
