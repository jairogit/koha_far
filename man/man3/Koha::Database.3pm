.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Koha::Database 3"
.TH Koha::Database 3 "2015-11-02" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::Database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Koha::Database;
\&  my $database = Koha::Database\->new();
\&  my $schema = $database\->schema();
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "schema"
.IX Subsection "schema"
.Vb 1
\&    $schema = $database\->schema;
.Ve
.PP
Returns a database handle connected to the Koha database for the
current context. If no connection has yet been made, this method
creates one, and connects to the database.
.PP
This database handle is cached for future use: if you call
\&\f(CW\*(C`$database\->schema\*(C'\fR twice, you will get the same handle both
times. If you need a second database handle, use \f(CW&new_schema\fR and
possibly \f(CW&set_schema\fR.
.SS "new_schema"
.IX Subsection "new_schema"
.Vb 1
\&  $schema = $database\->new_schema;
.Ve
.PP
Creates a new connection to the Koha database for the current context,
and returns the database handle (a \f(CW\*(C`DBI::db\*(C'\fR object).
.PP
The handle is not saved anywhere: this method is strictly a
convenience function; the point is that it knows which database to
connect to so that the caller doesn't have to know.
.SS "set_schema"
.IX Subsection "set_schema"
.Vb 4
\&  $my_schema = $database\->new_schema;
\&  $database\->set_schema($my_schema);
\&  ...
\&  $database\->restore_schema;
.Ve
.PP
\&\f(CW&set_schema\fR and \f(CW&restore_schema\fR work in a manner analogous to
\&\f(CW&set_context\fR and \f(CW&restore_context\fR.
.PP
\&\f(CW&set_schema\fR saves the current database handle on a stack, then sets
the current database handle to \f(CW$my_schema\fR.
.PP
\&\f(CW$my_schema\fR is assumed to be a good database handle.
.SS "restore_schema"
.IX Subsection "restore_schema"
.Vb 1
\&  $database\->restore_schema;
.Ve
.PP
Restores the database handle saved by an earlier call to
\&\f(CW\*(C`$database\->set_schema\*(C'\fR.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "AUTHOR"
.IX Header "AUTHOR"
Chris Cormack, <chrisc@catalyst.net.nz>
