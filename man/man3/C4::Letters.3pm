.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "C4::Letters 3"
.TH C4::Letters 3 "2015-11-02" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Letters \- Give functions for Letters management
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use C4::Letters;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 2
\&  "Letters" is the tool used in Koha to manage informations sent to the patrons and/or the library. This include some cron jobs like
\&  late issues, as well as other tasks like sending a mail to users that have subscribed to a "serial issue alert" (= being warned every time a new issue has arrived at the library)
\&
\&  Letters are managed through "alerts" sent by Koha on some events. All "alert" related functions are in this module too.
.Ve
.SS "GetLetters([$module])"
.IX Subsection "GetLetters([$module])"
.Vb 3
\&  $letters = &GetLetters($module);
\&  returns informations about letters.
\&  if needed, $module filters for letters given module
.Ve
.SS "GetLetterTemplates"
.IX Subsection "GetLetterTemplates"
.Vb 7
\&    my $letter_templates = GetLetterTemplates(
\&        {
\&            module => \*(Aqcirculation\*(Aq,
\&            code => \*(Aqmy code\*(Aq,
\&            branchcode => \*(AqCPL\*(Aq, # \*(Aq\*(Aq for default,
\&        }
\&    );
\&
\&    Return a hashref of letter templates.
\&    The key will be the message transport type.
.Ve
.SS "GetLettersAvailableForALibrary"
.IX Subsection "GetLettersAvailableForALibrary"
.Vb 6
\&    my $letters = GetLettersAvailableForALibrary(
\&        {
\&            branchcode => \*(AqCPL\*(Aq, # \*(Aq\*(Aq for default
\&            module => \*(Aqcirculation\*(Aq,
\&        }
\&    );
\&
\&    Return an arrayref of letters, sorted by name.
\&    If a specific letter exist for the given branchcode, it will be retrieve.
\&    Otherwise the default letter will be.
.Ve
.SS "DelLetter"
.IX Subsection "DelLetter"
.Vb 8
\&    DelLetter(
\&        {
\&            branchcode => \*(AqCPL\*(Aq,
\&            module => \*(Aqcirculation\*(Aq,
\&            code => \*(Aqmy code\*(Aq,
\&            [ mtt => \*(Aqemail\*(Aq, ]
\&        }
\&    );
\&
\&    Delete the letter. The mtt parameter is facultative.
\&    If not given, all templates mathing the other parameters will be removed.
.Ve
.ie n .SS "addalert ($borrowernumber, $type, $externalid)"
.el .SS "addalert ($borrowernumber, \f(CW$type\fP, \f(CW$externalid\fP)"
.IX Subsection "addalert ($borrowernumber, $type, $externalid)"
.Vb 4
\&    parameters : 
\&    \- $borrowernumber : the number of the borrower subscribing to the alert
\&    \- $type : the type of alert.
\&    \- $externalid : the primary key of the object to put alert on. For issues, the alert is made on subscriptionid.
\&    
\&    create an alert and return the alertid (primary key)
.Ve
.SS "delalert ($alertid)"
.IX Subsection "delalert ($alertid)"
.Vb 3
\&    parameters :
\&    \- alertid : the alert id
\&    deletes the alert
.Ve
.SS "getalert ([$borrowernumber], [$type], [$externalid])"
.IX Subsection "getalert ([$borrowernumber], [$type], [$externalid])"
.Vb 5
\&    parameters :
\&    \- $borrowernumber : the number of the borrower subscribing to the alert
\&    \- $type : the type of alert.
\&    \- $externalid : the primary key of the object to put alert on. For issues, the alert is made on subscriptionid.
\&    all parameters NON mandatory. If a parameter is omitted, the query is done without the corresponding parameter. For example, without $externalid, returns all alerts for a borrower on a topic.
.Ve
.ie n .SS "findrelatedto($type, $externalid)"
.el .SS "findrelatedto($type, \f(CW$externalid\fP)"
.IX Subsection "findrelatedto($type, $externalid)"
.Vb 3
\&    parameters :
\&    \- $type : the type of alert
\&    \- $externalid : the id of the "object" to query
\&
\&    In the table alert, a "id" is stored in the externalid field. This "id" is related to another table, depending on the type of the alert.
\&    When type=issue, the id is related to a subscriptionid and this sub returns the name of the biblio.
.Ve
.SS "SendAlerts"
.IX Subsection "SendAlerts"
.Vb 4
\&    parameters :
\&    \- $type : the type of alert
\&    \- $externalid : the id of the "object" to query
\&    \- $letter_code : the letter to send.
\&
\&    send an alert to all borrowers having put an alert on a given subject.
.Ve
.ie n .SS "GetPreparedLetter( %params )"
.el .SS "GetPreparedLetter( \f(CW%params\fP )"
.IX Subsection "GetPreparedLetter( %params )"
.Vb 10
\&    %params hash:
\&      module => letter module, mandatory
\&      letter_code => letter code, mandatory
\&      branchcode => for letter selection, if missing default system letter taken
\&      tables => a hashref with table names as keys. Values are either:
\&        \- a scalar \- primary key value
\&        \- an arrayref \- primary key values
\&        \- a hashref \- full record
\&      substitute => custom substitution key/value pairs
\&      repeat => records to be substituted on consecutive lines:
\&        \- an arrayref \- tries to guess what needs substituting by
\&          taking remaining << >> tokensr; not recommended
\&        \- a hashref token => @tables \- replaces <token> << >> << >> </token>
\&          subtemplate for each @tables row; table is a hashref as above
\&      want_librarian => boolean,  if set to true triggers librarian details
\&        substitution from the userenv
\&    Return value:
\&      letter fields hashref (title & content useful)
.Ve
.ie n .SS "_parseletter($letter, $table, $values)"
.el .SS "_parseletter($letter, \f(CW$table\fP, \f(CW$values\fP)"
.IX Subsection "_parseletter($letter, $table, $values)"
.Vb 6
\&    parameters :
\&    \- $letter : a hash to letter fields (title & content useful)
\&    \- $table : the Koha table to parse.
\&    \- $values : table record hashref
\&    parse all fields from a table, and replace values in title & content with the appropriate value
\&    (not exported sub, used only internally)
.Ve
.SS "EnqueueLetter"
.IX Subsection "EnqueueLetter"
.Vb 2
\&  my $success = EnqueueLetter( { letter => $letter, 
\&        borrowernumber => \*(Aq12\*(Aq, message_transport_type => \*(Aqemail\*(Aq } )
.Ve
.PP
places a letter in the message_queue database table, which will
eventually get processed (sent) by the process_message_queue.pl
cronjob when it calls SendQueuedMessages.
.PP
return message_id on success
.SS "SendQueuedMessages ([$hashref])"
.IX Subsection "SendQueuedMessages ([$hashref])"
.Vb 1
\&  my $sent = SendQueuedMessages( { verbose => 1 } );
.Ve
.PP
sends all of the 'pending' items in the message queue.
.PP
returns number of messages sent.
.SS "GetRSSMessages"
.IX Subsection "GetRSSMessages"
.Vb 1
\&  my $message_list = GetRSSMessages( { limit => 10, borrowernumber => \*(Aq14\*(Aq } )
.Ve
.PP
returns a listref of all queued \s-1RSS\s0 messages for a particular person.
.SS "GetPrintMessages"
.IX Subsection "GetPrintMessages"
.Vb 1
\&  my $message_list = GetPrintMessages( { borrowernumber => $borrowernumber } )
.Ve
.PP
Returns a arrayref of all queued print messages (optionally, for a particular
person).
.SS "GetQueuedMessages ([$hashref])"
.IX Subsection "GetQueuedMessages ([$hashref])"
.Vb 1
\&  my $messages = GetQueuedMessage( { borrowernumber => \*(Aq123\*(Aq, limit => 20 } );
.Ve
.PP
fetches messages out of the message queue.
.PP
returns:
list of hashes, each has represents a message in the message queue.
.SS "GetMessageTransportTypes"
.IX Subsection "GetMessageTransportTypes"
.Vb 1
\&  my @mtt = GetMessageTransportTypes();
\&
\&  returns an arrayref of transport types
.Ve
.SS "_add_attachements"
.IX Subsection "_add_attachements"
named parameters:
letter \- the standard letter hashref
attachments \- listref of attachments. each attachment is a hashref of:
  type \- the mime type, like 'text/plain'
  content \- the actual attachment
  filename \- the name of the attachment.
message \- a MIME::Lite object to attach these to.
.PP
returns your letter object, with the content updated.
