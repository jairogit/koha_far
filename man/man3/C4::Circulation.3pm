.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "C4::Circulation 3"
.TH C4::Circulation 3 "2015-11-02" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Circulation \- Koha circulation module
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use C4::Circulation;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The functions in this module deal with circulation, issues, and
returns, as well as general information about the library.
Also deals with stocktaking.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "barcodedecode"
.IX Subsection "barcodedecode"
.Vb 1
\&  $str = &barcodedecode($barcode, [$filter]);
.Ve
.PP
Generic filter function for barcode string.
Called on every circ if the System Pref itemBarcodeInputFilter is set.
Will do some manipulation of the barcode for systems that deliver a barcode
to circulation.pl that differs from the barcode stored for the item.
For proper functioning of this filter, calling the function on the 
correct barcode string (items.barcode) should return an unaltered barcode.
.PP
The optional \f(CW$filter\fR argument is to allow for testing or explicit 
behavior that ignores the System Pref.  Valid values are the same as the 
System Pref options.
.SS "decode"
.IX Subsection "decode"
.Vb 1
\&  $str = &decode($chunk);
.Ve
.PP
Decodes a segment of a string emitted by a CueCat barcode scanner and
returns it.
.PP
\&\s-1FIXME:\s0 Should be replaced with Barcode::Cuecat from \s-1CPAN\s0
or Javascript based decoding on the client side.
.SS "transferbook"
.IX Subsection "transferbook"
.Vb 2
\&  ($dotransfer, $messages, $iteminformation) = &transferbook($newbranch, 
\&                                            $barcode, $ignore_reserves);
.Ve
.PP
Transfers an item to a new branch. If the item is currently on loan, it is automatically returned before the actual transfer.
.PP
\&\f(CW$newbranch\fR is the code for the branch to which the item should be transferred.
.PP
\&\f(CW$barcode\fR is the barcode of the item to be transferred.
.PP
If \f(CW$ignore_reserves\fR is true, \f(CW&transferbook\fR ignores reserves.
Otherwise, if an item is reserved, the transfer fails.
.PP
Returns three values:
.ie n .IP "$dotransfer" 4
.el .IP "\f(CW$dotransfer\fR" 4
.IX Item "$dotransfer"
is true if the transfer was successful.
.ie n .IP "$messages" 4
.el .IP "\f(CW$messages\fR" 4
.IX Item "$messages"
is a reference-to-hash which may have any of the following keys:
.RS 4
.ie n .IP """BadBarcode""" 4
.el .IP "\f(CWBadBarcode\fR" 4
.IX Item "BadBarcode"
There is no item in the catalog with the given barcode. The value is \f(CW$barcode\fR.
.ie n .IP """IsPermanent""" 4
.el .IP "\f(CWIsPermanent\fR" 4
.IX Item "IsPermanent"
The item's home branch is permanent. This doesn't prevent the item from being transferred, though. The value is the code of the item's home branch.
.ie n .IP """DestinationEqualsHolding""" 4
.el .IP "\f(CWDestinationEqualsHolding\fR" 4
.IX Item "DestinationEqualsHolding"
The item is already at the branch to which it is being transferred. The transfer is nonetheless considered to have failed. The value should be ignored.
.ie n .IP """WasReturned""" 4
.el .IP "\f(CWWasReturned\fR" 4
.IX Item "WasReturned"
The item was on loan, and \f(CW&transferbook\fR automatically returned it before transferring it. The value is the borrower number of the patron who had the item.
.ie n .IP """ResFound""" 4
.el .IP "\f(CWResFound\fR" 4
.IX Item "ResFound"
The item was reserved. The value is a reference-to-hash whose keys are fields from the reserves table of the Koha database, and \f(CW\*(C`biblioitemnumber\*(C'\fR. It also has the key \f(CW\*(C`ResFound\*(C'\fR, whose value is either \f(CW\*(C`Waiting\*(C'\fR or \f(CW\*(C`Reserved\*(C'\fR.
.ie n .IP """WasTransferred""" 4
.el .IP "\f(CWWasTransferred\fR" 4
.IX Item "WasTransferred"
The item was eligible to be transferred. Barring problems communicating with the database, the transfer should indeed have succeeded. The value should be ignored.
.RE
.RS 4
.RE
.SS "itemissues"
.IX Subsection "itemissues"
.Vb 1
\&  @issues = &itemissues($biblioitemnumber, $biblio);
.Ve
.PP
Looks up information about who has borrowed the book(s) with the
given biblioitemnumber.
.PP
\&\f(CW$biblio\fR is ignored.
.PP
\&\f(CW&itemissues\fR returns an array of references-to-hash. The keys
include the fields from the \f(CW\*(C`items\*(C'\fR table in the Koha database.
Additional keys include:
.ie n .IP """date_due""" 4
.el .IP "\f(CWdate_due\fR" 4
.IX Item "date_due"
If the item is currently on loan, this gives the due date.
.Sp
If the item is not on loan, then this is either \*(L"Available\*(R" or
\&\*(L"Cancelled\*(R", if the item has been withdrawn.
.ie n .IP """card""" 4
.el .IP "\f(CWcard\fR" 4
.IX Item "card"
If the item is currently on loan, this gives the card number of the
patron who currently has the item.
.ie n .IP """timestamp0"", ""timestamp1"", ""timestamp2""" 4
.el .IP "\f(CWtimestamp0\fR, \f(CWtimestamp1\fR, \f(CWtimestamp2\fR" 4
.IX Item "timestamp0, timestamp1, timestamp2"
These give the timestamp for the last three times the item was
borrowed.
.ie n .IP """card0"", ""card1"", ""card2""" 4
.el .IP "\f(CWcard0\fR, \f(CWcard1\fR, \f(CWcard2\fR" 4
.IX Item "card0, card1, card2"
The card number of the last three patrons who borrowed this item.
.ie n .IP """borrower0"", ""borrower1"", ""borrower2""" 4
.el .IP "\f(CWborrower0\fR, \f(CWborrower1\fR, \f(CWborrower2\fR" 4
.IX Item "borrower0, borrower1, borrower2"
The borrower number of the last three patrons who borrowed this item.
.SS "CanBookBeIssued"
.IX Subsection "CanBookBeIssued"
.Vb 2
\&  ( $issuingimpossible, $needsconfirmation ) =  CanBookBeIssued( $borrower, 
\&                      $barcode, $duedatespec, $inprocess, $ignore_reserves );
.Ve
.PP
Check if a book can be issued.
.PP
\&\f(CW$issuingimpossible\fR and \f(CW$needsconfirmation\fR are some hashref.
.ie n .IP "$borrower hash with borrower informations (from GetMember or GetMemberDetails)" 4
.el .IP "\f(CW$borrower\fR hash with borrower informations (from GetMember or GetMemberDetails)" 4
.IX Item "$borrower hash with borrower informations (from GetMember or GetMemberDetails)"
.PD 0
.ie n .IP "$barcode is the bar code of the book being issued." 4
.el .IP "\f(CW$barcode\fR is the bar code of the book being issued." 4
.IX Item "$barcode is the bar code of the book being issued."
.ie n .IP "$duedatespec is a C4::Dates object." 4
.el .IP "\f(CW$duedatespec\fR is a C4::Dates object." 4
.IX Item "$duedatespec is a C4::Dates object."
.ie n .IP "$inprocess boolean switch =item $ignore_reserves boolean switch" 4
.el .IP "\f(CW$inprocess\fR boolean switch =item \f(CW$ignore_reserves\fR boolean switch" 4
.IX Item "$inprocess boolean switch =item $ignore_reserves boolean switch"
.PD
.PP
Returns :
.ie n .IP "$issuingimpossible a reference to a hash. It contains reasons why issuing is impossible. Possible values are :" 4
.el .IP "\f(CW$issuingimpossible\fR a reference to a hash. It contains reasons why issuing is impossible. Possible values are :" 4
.IX Item "$issuingimpossible a reference to a hash. It contains reasons why issuing is impossible. Possible values are :"
.PP
\fI\s-1INVALID_DATE\s0\fR
.IX Subsection "INVALID_DATE"
.PP
sticky due date is invalid
.PP
\fI\s-1GNA\s0\fR
.IX Subsection "GNA"
.PP
borrower gone with no address
.PP
\fI\s-1CARD_LOST\s0\fR
.IX Subsection "CARD_LOST"
.PP
borrower declared it's card lost
.PP
\fI\s-1DEBARRED\s0\fR
.IX Subsection "DEBARRED"
.PP
borrower debarred
.PP
\fI\s-1UNKNOWN_BARCODE\s0\fR
.IX Subsection "UNKNOWN_BARCODE"
.PP
barcode unknown
.PP
\fI\s-1NOT_FOR_LOAN\s0\fR
.IX Subsection "NOT_FOR_LOAN"
.PP
item is not for loan
.PP
\fI\s-1WTHDRAWN\s0\fR
.IX Subsection "WTHDRAWN"
.PP
item withdrawn.
.PP
\fI\s-1RESTRICTED\s0\fR
.IX Subsection "RESTRICTED"
.PP
item is restricted (set by ??)
.PP
\&\f(CW$needsconfirmation\fR a reference to a hash. It contains reasons why the loan 
could be prevented, but ones that can be overriden by the operator.
.PP
Possible values are :
.PP
\fI\s-1DEBT\s0\fR
.IX Subsection "DEBT"
.PP
borrower has debts.
.PP
\fI\s-1RENEW_ISSUE\s0\fR
.IX Subsection "RENEW_ISSUE"
.PP
renewing, not issuing
.PP
\fI\s-1ISSUED_TO_ANOTHER\s0\fR
.IX Subsection "ISSUED_TO_ANOTHER"
.PP
issued to someone else.
.PP
\fI\s-1RESERVED\s0\fR
.IX Subsection "RESERVED"
.PP
reserved for someone else.
.PP
\fI\s-1INVALID_DATE\s0\fR
.IX Subsection "INVALID_DATE"
.PP
sticky due date is invalid or due date in the past
.PP
\fI\s-1TOO_MANY\s0\fR
.IX Subsection "TOO_MANY"
.PP
if the borrower borrows to much things
.SS "CanBookBeReturned"
.IX Subsection "CanBookBeReturned"
.Vb 1
\&  ($returnallowed, $message) = CanBookBeReturned($item, $branch)
.Ve
.PP
Check whether the item can be returned to the provided branch
.ie n .IP "$item is a hash of item information as returned from GetItem" 4
.el .IP "\f(CW$item\fR is a hash of item information as returned from GetItem" 4
.IX Item "$item is a hash of item information as returned from GetItem"
.PD 0
.ie n .IP "$branch is the branchcode where the return is taking place" 4
.el .IP "\f(CW$branch\fR is the branchcode where the return is taking place" 4
.IX Item "$branch is the branchcode where the return is taking place"
.PD
.PP
Returns:
.ie n .IP "$returnallowed is 0 or 1, corresponding to whether the return is allowed (1) or not (0)" 4
.el .IP "\f(CW$returnallowed\fR is 0 or 1, corresponding to whether the return is allowed (1) or not (0)" 4
.IX Item "$returnallowed is 0 or 1, corresponding to whether the return is allowed (1) or not (0)"
.PD 0
.ie n .IP "$message is the branchcode where the item \s-1SHOULD\s0 be returned, if the return is not allowed" 4
.el .IP "\f(CW$message\fR is the branchcode where the item \s-1SHOULD\s0 be returned, if the return is not allowed" 4
.IX Item "$message is the branchcode where the item SHOULD be returned, if the return is not allowed"
.PD
.SS "CheckHighHolds"
.IX Subsection "CheckHighHolds"
.Vb 3
\&    used when syspref decreaseLoanHighHolds is active. Returns 1 or 0 to define whether the minimum value held in
\&    decreaseLoanHighHoldsValue is exceeded, the total number of outstanding holds, the number of days the loan
\&    has been decreased to (held in syspref decreaseLoanHighHoldsValue), and the new due date
.Ve
.SS "AddIssue"
.IX Subsection "AddIssue"
.Vb 1
\&  &AddIssue($borrower, $barcode, [$datedue], [$cancelreserve], [$issuedate])
.Ve
.PP
Issue a book. Does no check, they are done in CanBookBeIssued. If we reach this sub, it means the user confirmed if needed.
.ie n .IP "$borrower is a hash with borrower informations (from GetMember or GetMemberDetails)." 4
.el .IP "\f(CW$borrower\fR is a hash with borrower informations (from GetMember or GetMemberDetails)." 4
.IX Item "$borrower is a hash with borrower informations (from GetMember or GetMemberDetails)."
.PD 0
.ie n .IP "$barcode is the barcode of the item being issued." 4
.el .IP "\f(CW$barcode\fR is the barcode of the item being issued." 4
.IX Item "$barcode is the barcode of the item being issued."
.ie n .IP "$datedue is a C4::Dates object for the max date of return, i.e. the date due (optional). Calculated if empty." 4
.el .IP "\f(CW$datedue\fR is a C4::Dates object for the max date of return, i.e. the date due (optional). Calculated if empty." 4
.IX Item "$datedue is a C4::Dates object for the max date of return, i.e. the date due (optional). Calculated if empty."
.ie n .IP "$cancelreserve is 1 to override and cancel any pending reserves for the item (optional)." 4
.el .IP "\f(CW$cancelreserve\fR is 1 to override and cancel any pending reserves for the item (optional)." 4
.IX Item "$cancelreserve is 1 to override and cancel any pending reserves for the item (optional)."
.ie n .IP "$issuedate is the date to issue the item in iso (YYYY-MM-DD) format (optional). Defaults to today.  Unlike $datedue, \s-1NOT\s0 a C4::Dates object, unfortunately." 4
.el .IP "\f(CW$issuedate\fR is the date to issue the item in iso (YYYY-MM-DD) format (optional). Defaults to today.  Unlike \f(CW$datedue\fR, \s-1NOT\s0 a C4::Dates object, unfortunately." 4
.IX Item "$issuedate is the date to issue the item in iso (YYYY-MM-DD) format (optional). Defaults to today.  Unlike $datedue, NOT a C4::Dates object, unfortunately."
.PD
AddIssue does the following things :
.Sp
.Vb 11
\&  \- step 01: check that there is a borrowernumber & a barcode provided
\&  \- check for RENEWAL (book issued & being issued to the same patron)
\&      \- renewal YES = Calculate Charge & renew
\&      \- renewal NO  =
\&          * BOOK ACTUALLY ISSUED ? do a return if book is actually issued (but to someone else)
\&          * RESERVE PLACED ?
\&              \- fill reserve if reserve to this patron
\&              \- cancel reserve or not, otherwise
\&          * TRANSFERT PENDING ?
\&              \- complete the transfert
\&          * ISSUE THE BOOK
.Ve
.SS "GetLoanLength"
.IX Subsection "GetLoanLength"
.Vb 1
\&  my $loanlength = &GetLoanLength($borrowertype,$itemtype,branchcode)
.Ve
.PP
Get loan length for an itemtype, a borrower type and a branch
.SS "GetHardDueDate"
.IX Subsection "GetHardDueDate"
.Vb 1
\&  my ($hardduedate,$hardduedatecompare) = &GetHardDueDate($borrowertype,$itemtype,branchcode)
.Ve
.PP
Get the Hard Due Date and it's comparison for an itemtype, a borrower type and a branch
.SS "GetIssuingRule"
.IX Subsection "GetIssuingRule"
.Vb 1
\&  my $irule = &GetIssuingRule($borrowertype,$itemtype,branchcode)
.Ve
.PP
\&\s-1FIXME\s0 \- This is a copy-paste of GetLoanLength
as a stop-gap.  Do not wish to change \s-1API\s0 for GetLoanLength 
this close to release.
.PP
Get the issuing rule for an itemtype, a borrower type and a branch
Returns a hashref from the issuingrules table.
.SS "GetBranchBorrowerCircRule"
.IX Subsection "GetBranchBorrowerCircRule"
.Vb 1
\&  my $branch_cat_rule = GetBranchBorrowerCircRule($branchcode, $categorycode);
.Ve
.PP
Retrieves circulation rule attributes that apply to the given
branch and patron category, regardless of item type.  
The return value is a hashref containing the following key:
.PP
maxissueqty \- maximum number of loans that a
patron of the given category can have at the given
branch.  If the value is undef, no limit.
.PP
This will first check for a specific branch and
category match from branch_borrower_circ_rules.
.PP
If no rule is found, it will then check default_branch_circ_rules
(same branch, default category).  If no rule is found,
it will then check default_borrower_circ_rules (default 
branch, same category), then failing that, default_circ_rules
(default branch, default category).
.PP
If no rule has been found in the database, it will default to
the buillt in rule:
.PP
maxissueqty \- undef
.PP
\&\f(CW$branchcode\fR and \f(CW$categorycode\fR should contain the
literal branch code and patron category code, respectively \- no
wildcards.
.SS "GetBranchItemRule"
.IX Subsection "GetBranchItemRule"
.Vb 1
\&  my $branch_item_rule = GetBranchItemRule($branchcode, $itemtype);
.Ve
.PP
Retrieves circulation rule attributes that apply to the given
branch and item type, regardless of patron category.
.PP
The return value is a hashref containing the following keys:
.PP
holdallowed => Hold policy for this branch and itemtype. Possible values:
  0: No holds allowed.
  1: Holds allowed only by patrons that have the same homebranch as the item.
  2: Holds allowed from any patron.
.PP
returnbranch => branch to which to return item.  Possible values:
  noreturn: do not return, let item remain where checked in (floating collections)
  homebranch: return to item's home branch
.PP
This searches branchitemrules in the following order:
.PP
.Vb 4
\&  * Same branchcode and itemtype
\&  * Same branchcode, itemtype \*(Aq*\*(Aq
\&  * branchcode \*(Aq*\*(Aq, same itemtype
\&  * branchcode and itemtype \*(Aq*\*(Aq
.Ve
.PP
Neither \f(CW$branchcode\fR nor \f(CW$itemtype\fR should be '*'.
.SS "AddReturn"
.IX Subsection "AddReturn"
.Vb 2
\&  ($doreturn, $messages, $iteminformation, $borrower) =
\&      &AddReturn( $barcode, $branch [,$exemptfine] [,$dropbox] [,$returndate] );
.Ve
.PP
Returns a book.
.ie n .IP "$barcode is the bar code of the book being returned." 4
.el .IP "\f(CW$barcode\fR is the bar code of the book being returned." 4
.IX Item "$barcode is the bar code of the book being returned."
.PD 0
.ie n .IP "$branch is the code of the branch where the book is being returned." 4
.el .IP "\f(CW$branch\fR is the code of the branch where the book is being returned." 4
.IX Item "$branch is the code of the branch where the book is being returned."
.ie n .IP "$exemptfine indicates that overdue charges for the item will be removed. Optional." 4
.el .IP "\f(CW$exemptfine\fR indicates that overdue charges for the item will be removed. Optional." 4
.IX Item "$exemptfine indicates that overdue charges for the item will be removed. Optional."
.ie n .IP "$dropbox indicates that the check-in date is assumed to be yesterday, or the last non-holiday as defined in C4::Calendar .  If overdue charges are applied and $dropbox is true, the last charge will be removed.  This assumes that the fines accrual script has run for _today_. Optional." 4
.el .IP "\f(CW$dropbox\fR indicates that the check-in date is assumed to be yesterday, or the last non-holiday as defined in C4::Calendar .  If overdue charges are applied and \f(CW$dropbox\fR is true, the last charge will be removed.  This assumes that the fines accrual script has run for _today_. Optional." 4
.IX Item "$dropbox indicates that the check-in date is assumed to be yesterday, or the last non-holiday as defined in C4::Calendar .  If overdue charges are applied and $dropbox is true, the last charge will be removed.  This assumes that the fines accrual script has run for _today_. Optional."
.ie n .IP "$return_date allows the default return date to be overridden by the given return date. Optional." 4
.el .IP "\f(CW$return_date\fR allows the default return date to be overridden by the given return date. Optional." 4
.IX Item "$return_date allows the default return date to be overridden by the given return date. Optional."
.PD
.PP
\&\f(CW&AddReturn\fR returns a list of four items:
.PP
\&\f(CW$doreturn\fR is true iff the return succeeded.
.PP
\&\f(CW$messages\fR is a reference-to-hash giving feedback on the operation.
The keys of the hash are:
.ie n .IP """BadBarcode""" 4
.el .IP "\f(CWBadBarcode\fR" 4
.IX Item "BadBarcode"
No item with this barcode exists. The value is \f(CW$barcode\fR.
.ie n .IP """NotIssued""" 4
.el .IP "\f(CWNotIssued\fR" 4
.IX Item "NotIssued"
The book is not currently on loan. The value is \f(CW$barcode\fR.
.ie n .IP """IsPermanent""" 4
.el .IP "\f(CWIsPermanent\fR" 4
.IX Item "IsPermanent"
The book's home branch is a permanent collection. If you have borrowed
this book, you are not allowed to return it. The value is the code for
the book's home branch.
.ie n .IP """withdrawn""" 4
.el .IP "\f(CWwithdrawn\fR" 4
.IX Item "withdrawn"
This book has been withdrawn/cancelled. The value should be ignored.
.ie n .IP """Wrongbranch""" 4
.el .IP "\f(CWWrongbranch\fR" 4
.IX Item "Wrongbranch"
This book has was returned to the wrong branch.  The value is a hashref
so that \f(CW\*(C`$messages\-\*(C'\fR{Wrongbranch}\->{Wrongbranch}> and \f(CW\*(C`$messages\-\*(C'\fR{Wrongbranch}\->{Rightbranch}>
contain the branchcode of the incorrect and correct return library, respectively.
.ie n .IP """ResFound""" 4
.el .IP "\f(CWResFound\fR" 4
.IX Item "ResFound"
The item was reserved. The value is a reference-to-hash whose keys are
fields from the reserves table of the Koha database, and
\&\f(CW\*(C`biblioitemnumber\*(C'\fR. It also has the key \f(CW\*(C`ResFound\*(C'\fR, whose value is
either \f(CW\*(C`Waiting\*(C'\fR, \f(CW\*(C`Reserved\*(C'\fR, or 0.
.PP
\&\f(CW$iteminformation\fR is a reference-to-hash, giving information about the
returned item from the issues table.
.PP
\&\f(CW$borrower\fR is a reference-to-hash, giving information about the
patron who last borrowed the book.
.SS "MarkIssueReturned"
.IX Subsection "MarkIssueReturned"
.Vb 1
\&  MarkIssueReturned($borrowernumber, $itemnumber, $dropbox_branch, $returndate, $privacy);
.Ve
.PP
Unconditionally marks an issue as being returned by
moving the \f(CW\*(C`issues\*(C'\fR row to \f(CW\*(C`old_issues\*(C'\fR and
setting \f(CW\*(C`returndate\*(C'\fR to the current date, or
the last non-holiday date of the branccode specified in
\&\f(CW\*(C`dropbox_branch\*(C'\fR .  Assumes you've already checked that 
it's safe to do this, i.e. last non-holiday > issuedate.
.PP
if \f(CW$returndate\fR is specified (in iso format), it is used as the date
of the return. It is ignored when a dropbox_branch is passed in.
.PP
\&\f(CW$privacy\fR contains the privacy parameter. If the patron has set privacy to 2,
the old_issue is immediately anonymised
.PP
Ideally, this function would be internal to \f(CW\*(C`C4::Circulation\*(C'\fR,
not exported, but it is currently needed by one 
routine in \f(CW\*(C`C4::Accounts\*(C'\fR.
.SS "_debar_user_on_return"
.IX Subsection "_debar_user_on_return"
.Vb 1
\&    _debar_user_on_return($borrower, $item, $datedue, today);
.Ve
.PP
\&\f(CW$borrower\fR borrower hashref
.PP
\&\f(CW$item\fR item hashref
.PP
\&\f(CW$datedue\fR date due DateTime object
.PP
\&\f(CW$today\fR DateTime object representing the return time
.PP
Internal function, called only by AddReturn that calculates and updates
 the user fine days, and debars him if necessary.
.PP
Should only be called for overdue returns
.SS "_FixOverduesOnReturn"
.IX Subsection "_FixOverduesOnReturn"
.Vb 1
\&   &_FixOverduesOnReturn($brn,$itm, $exemptfine, $dropboxmode);
.Ve
.PP
\&\f(CW$brn\fR borrowernumber
.PP
\&\f(CW$itm\fR itemnumber
.PP
\&\f(CW$exemptfine\fR \s-1BOOL\s0 \*(-- remove overdue charge associated with this issue. 
\&\f(CW$dropboxmode\fR \s-1BOOL\s0 \*(-- remove lastincrement on overdue charge associated with this issue.
.PP
Internal function, called only by AddReturn
.SS "_FixAccountForLostAndReturned"
.IX Subsection "_FixAccountForLostAndReturned"
.Vb 1
\&  &_FixAccountForLostAndReturned($itemnumber, [$borrowernumber, $barcode]);
.Ve
.PP
Calculates the charge for a book lost and returned.
.PP
Internal function, not exported, called only by AddReturn.
.PP
\&\s-1FIXME:\s0 This function reflects how inscrutable fines logic is.  Fix both.
\&\s-1FIXME:\s0 Give a positive return value on success.  It might be the \f(CW$borrowernumber\fR who received credit, or the amount forgiven.
.SS "_GetCircControlBranch"
.IX Subsection "_GetCircControlBranch"
.Vb 1
\&   my $circ_control_branch = _GetCircControlBranch($iteminfos, $borrower);
.Ve
.PP
Internal function :
.PP
Return the library code to be used to determine which circulation
policy applies to a transaction.  Looks up the CircControl and
HomeOrHoldingBranch system preferences.
.PP
\&\f(CW$iteminfos\fR is a hashref to iteminfo. Only {homebranch or holdingbranch} is used.
.PP
\&\f(CW$borrower\fR is a hashref to borrower. Only {branchcode} is used.
.SS "GetItemIssue"
.IX Subsection "GetItemIssue"
.Vb 1
\&  $issue = &GetItemIssue($itemnumber);
.Ve
.PP
Returns patron currently having a book, or undef if not checked out.
.PP
\&\f(CW$itemnumber\fR is the itemnumber.
.PP
\&\f(CW$issue\fR is a hashref of the row from the issues table.
.SS "GetOpenIssue"
.IX Subsection "GetOpenIssue"
.Vb 1
\&  $issue = GetOpenIssue( $itemnumber );
.Ve
.PP
Returns the row from the issues table if the item is currently issued, undef if the item is not currently issued
.PP
\&\f(CW$itemnumber\fR is the item's itemnumber
.PP
Returns a hashref
.SS "GetIssues"
.IX Subsection "GetIssues"
.Vb 2
\&    $issues = GetIssues({});    # return all issues!
\&    $issues = GetIssues({ borrowernumber => $borrowernumber, biblionumber => $biblionumber });
.Ve
.PP
Returns all pending issues that match given criteria.
Returns a arrayref or undef if an error occurs.
.PP
Allowed criteria are:
.IP "\(bu" 2
borrowernumber
.IP "\(bu" 2
biblionumber
.IP "\(bu" 2
itemnumber
.SS "GetItemIssues"
.IX Subsection "GetItemIssues"
.Vb 1
\&  $issues = &GetItemIssues($itemnumber, $history);
.Ve
.PP
Returns patrons that have issued a book
.PP
\&\f(CW$itemnumber\fR is the itemnumber
\&\f(CW$history\fR is false if you just want the current \*(L"issuer\*(R" (if any)
and true if you want issues history from old_issues also.
.PP
Returns reference to an array of hashes
.SS "GetBiblioIssues"
.IX Subsection "GetBiblioIssues"
.Vb 1
\&  $issues = GetBiblioIssues($biblionumber);
.Ve
.PP
this function get all issues from a biblionumber.
.PP
Return:
\&\f(CW$issues\fR is a reference to array which each value is ref-to-hash. This ref-to-hash containts all column from
tables issues and the firstname,surname & cardnumber from borrowers.
.SS "GetUpcomingDueIssues"
.IX Subsection "GetUpcomingDueIssues"
.Vb 1
\&  my $upcoming_dues = GetUpcomingDueIssues( { days_in_advance => 4 } );
.Ve
.SS "CanBookBeRenewed"
.IX Subsection "CanBookBeRenewed"
.Vb 1
\&  ($ok,$error) = &CanBookBeRenewed($borrowernumber, $itemnumber[, $override_limit]);
.Ve
.PP
Find out whether a borrowed item may be renewed.
.PP
\&\f(CW$borrowernumber\fR is the borrower number of the patron who currently
has the item on loan.
.PP
\&\f(CW$itemnumber\fR is the number of the item to renew.
.PP
\&\f(CW$override_limit\fR, if supplied with a true value, causes
the limit on the number of times that the loan can be renewed
(as controlled by the item type) to be ignored. Overriding also allows
to renew sooner than \*(L"No renewal before\*(R" and to manually renew loans
that are automatically renewed.
.PP
\&\f(CW$CanBookBeRenewed\fR returns a true value if the item may be renewed. The
item must currently be on loan to the specified borrower; renewals
must be allowed for the item's type; and the borrower must not have
already renewed the loan. \f(CW$error\fR will contain the reason the renewal can not proceed
.SS "AddRenewal"
.IX Subsection "AddRenewal"
.Vb 1
\&  &AddRenewal($borrowernumber, $itemnumber, $branch, [$datedue], [$lastreneweddate]);
.Ve
.PP
Renews a loan.
.PP
\&\f(CW$borrowernumber\fR is the borrower number of the patron who currently
has the item.
.PP
\&\f(CW$itemnumber\fR is the number of the item to renew.
.PP
\&\f(CW$branch\fR is the library where the renewal took place (if any).
           The library that controls the circ policies for the renewal is retrieved from the issues record.
.PP
\&\f(CW$datedue\fR can be a C4::Dates object used to set the due date.
.PP
\&\f(CW$lastreneweddate\fR is an optional ISO-formatted date used to set issues.lastreneweddate.  If
this parameter is not supplied, lastreneweddate is set to the current date.
.PP
If \f(CW$datedue\fR is the empty string, \f(CW&AddRenewal\fR will calculate the due date automatically
from the book's item type.
.SS "GetSoonestRenewDate"
.IX Subsection "GetSoonestRenewDate"
.Vb 1
\&  $NoRenewalBeforeThisDate = &GetSoonestRenewDate($borrowernumber, $itemnumber);
.Ve
.PP
Find out the soonest possible renew date of a borrowed item.
.PP
\&\f(CW$borrowernumber\fR is the borrower number of the patron who currently
has the item on loan.
.PP
\&\f(CW$itemnumber\fR is the number of the item to renew.
.PP
\&\f(CW$GetSoonestRenewDate\fR returns the DateTime of the soonest possible
renew date, based on the value \*(L"No renewal before\*(R" of the applicable
issuing rule. Returns the current date if the item can already be
renewed, and returns undefined if the borrower, loan, or item
cannot be found.
.SS "GetIssuingCharges"
.IX Subsection "GetIssuingCharges"
.Vb 1
\&  ($charge, $item_type) = &GetIssuingCharges($itemnumber, $borrowernumber);
.Ve
.PP
Calculate how much it would cost for a given patron to borrow a given
item, including any applicable discounts.
.PP
\&\f(CW$itemnumber\fR is the item number of item the patron wishes to borrow.
.PP
\&\f(CW$borrowernumber\fR is the patron's borrower number.
.PP
\&\f(CW&GetIssuingCharges\fR returns two values: \f(CW$charge\fR is the rental charge,
and \f(CW$item_type\fR is the code for the item's item type (e.g., \f(CW\*(C`VID\*(C'\fR
if it's a video).
.SS "AddIssuingCharge"
.IX Subsection "AddIssuingCharge"
.Vb 1
\&  &AddIssuingCharge( $itemno, $borrowernumber, $charge )
.Ve
.SS "GetTransfers"
.IX Subsection "GetTransfers"
.Vb 1
\&  GetTransfers($itemnumber);
.Ve
.SS "GetTransfersFromTo"
.IX Subsection "GetTransfersFromTo"
.Vb 1
\&  @results = GetTransfersFromTo($frombranch,$tobranch);
.Ve
.PP
Returns the list of pending transfers between \f(CW$from\fR and \f(CW$to\fR branch
.SS "DeleteTransfer"
.IX Subsection "DeleteTransfer"
.Vb 1
\&  &DeleteTransfer($itemnumber);
.Ve
.SS "AnonymiseIssueHistory"
.IX Subsection "AnonymiseIssueHistory"
.Vb 1
\&  ($rows,$err_history_not_deleted) = AnonymiseIssueHistory($date,$borrowernumber)
.Ve
.PP
This function write \s-1NULL\s0 instead of \f(CW$borrowernumber\fR given on input arg into the table issues.
if \f(CW$borrowernumber\fR is not set, it will delete the issue history for all borrower older than \f(CW$date\fR.
.PP
If c<$borrowernumber> is set, it will delete issue history for only that borrower, regardless of their opac privacy
setting (force delete).
.PP
return the number of affected rows and a value that evaluates to true if an error occurred deleting the history.
.SS "SendCirculationAlert"
.IX Subsection "SendCirculationAlert"
Send out a \f(CW\*(C`check\-in\*(C'\fR or \f(CW\*(C`checkout\*(C'\fR alert using the messaging system.
.PP
\&\fBParameters\fR:
.IP "type" 4
.IX Item "type"
Valid values for this parameter are: \f(CW\*(C`CHECKIN\*(C'\fR and \f(CW\*(C`CHECKOUT\*(C'\fR.
.IP "item" 4
.IX Item "item"
Hashref of information about the item being checked in or out.
.IP "borrower" 4
.IX Item "borrower"
Hashref of information about the borrower of the item.
.IP "branch" 4
.IX Item "branch"
The branchcode from where the checkout or check-in took place.
.PP
\&\fBExample\fR:
.PP
.Vb 6
\&    SendCirculationAlert({
\&        type     => \*(AqCHECKOUT\*(Aq,
\&        item     => $item,
\&        borrower => $borrower,
\&        branch   => $branch,
\&    });
.Ve
.SS "updateWrongTransfer"
.IX Subsection "updateWrongTransfer"
.Vb 1
\&  $items = updateWrongTransfer($itemNumber,$borrowernumber,$waitingAtLibrary,$FromLibrary);
.Ve
.PP
This function validate the line of brachtransfer but with the wrong destination (mistake from a librarian ...), and create a new line in branchtransfer from the actual library to the original library of reservation
.SS "UpdateHoldingbranch"
.IX Subsection "UpdateHoldingbranch"
.Vb 1
\&  $items = UpdateHoldingbranch($branch,$itmenumber);
.Ve
.PP
Simple methode for updating hodlingbranch in items \s-1BDD\s0 line
.SS "CalcDateDue"
.IX Subsection "CalcDateDue"
\&\f(CW$newdatedue\fR = CalcDateDue($startdate,$itemtype,$branchcode,$borrower);
.PP
this function calculates the due date given the start date and configured circulation rules,
checking against the holidays calendar as per the 'useDaysMode' syspref.
\&\f(CW$startdate\fR   = C4::Dates object representing start date of loan period (assumed to be today)
\&\f(CW$itemtype\fR  = itemtype code of item in question
\&\f(CW$branch\fR  = location whose calendar to use
\&\f(CW$borrower\fR = Borrower object
\&\f(CW$isrenewal\fR = Boolean: is true if we want to calculate the date due for a renewal. Else is false.
.SS "CheckRepeatableHolidays"
.IX Subsection "CheckRepeatableHolidays"
.Vb 1
\&  $countrepeatable = CheckRepeatableHoliday($itemnumber,$week_day,$branchcode);
.Ve
.PP
This function checks if the date due is a repeatable holiday
.PP
\&\f(CW$date_due\fR   = returndate calculate with no day check
\&\f(CW$itemnumber\fR  = itemnumber
\&\f(CW$branchcode\fR  = localisation of issue
.SS "CheckSpecialHolidays"
.IX Subsection "CheckSpecialHolidays"
.Vb 1
\&  $countspecial = CheckSpecialHolidays($years,$month,$day,$itemnumber,$branchcode);
.Ve
.PP
This function check if the date is a special holiday
.PP
\&\f(CW$years\fR   = the years of datedue
\&\f(CW$month\fR   = the month of datedue
\&\f(CW$day\fR     = the day of datedue
\&\f(CW$itemnumber\fR  = itemnumber
\&\f(CW$branchcode\fR  = localisation of issue
.SS "CheckRepeatableSpecialHolidays"
.IX Subsection "CheckRepeatableSpecialHolidays"
.Vb 1
\&  $countspecial = CheckRepeatableSpecialHolidays($month,$day,$itemnumber,$branchcode);
.Ve
.PP
This function check if the date is a repeatble special holidays
.PP
\&\f(CW$month\fR   = the month of datedue
\&\f(CW$day\fR     = the day of datedue
\&\f(CW$itemnumber\fR  = itemnumber
\&\f(CW$branchcode\fR  = localisation of issue
.SS "IsBranchTransferAllowed"
.IX Subsection "IsBranchTransferAllowed"
.Vb 1
\&  $allowed = IsBranchTransferAllowed( $toBranch, $fromBranch, $code );
.Ve
.PP
Code is either an itemtype or collection doe depending on the pref BranchTransferLimitsType
.SS "CreateBranchTransferLimit"
.IX Subsection "CreateBranchTransferLimit"
.Vb 1
\&  CreateBranchTransferLimit( $toBranch, $fromBranch, $code );
.Ve
.PP
\&\f(CW$code\fR is either itemtype or collection code depending on what the pref BranchTransferLimitsType is set to.
.SS "DeleteBranchTransferLimits"
.IX Subsection "DeleteBranchTransferLimits"
.Vb 1
\&    my $result = DeleteBranchTransferLimits($frombranch);
.Ve
.PP
Deletes all the library transfer limits for one library.  Returns the
number of limits deleted, 0e0 if no limits were deleted, or undef if
no arguments are supplied.
.SS "TransferSlip"
.IX Subsection "TransferSlip"
.Vb 1
\&  TransferSlip($user_branch, $itemnumber, $to_branch)
\&
\&  Returns letter hash ( see C4::Letters::GetPreparedLetter ) or undef
.Ve
.SS "CheckIfIssuedToPatron"
.IX Subsection "CheckIfIssuedToPatron"
.Vb 1
\&  CheckIfIssuedToPatron($borrowernumber, $biblionumber)
\&
\&  Return 1 if any record item is issued to patron, otherwise return 0
.Ve
.SS "IsItemIssued"
.IX Subsection "IsItemIssued"
.Vb 1
\&  IsItemIssued( $itemnumber )
\&
\&  Return 1 if the item is on loan, otherwise return 0
.Ve
.SS "GetAgeRestriction"
.IX Subsection "GetAgeRestriction"
.Vb 2
\&  my ($ageRestriction, $daysToAgeRestriction) = GetAgeRestriction($record_restrictions, $borrower);
\&  my ($ageRestriction, $daysToAgeRestriction) = GetAgeRestriction($record_restrictions);
\&
\&  if($daysToAgeRestriction <= 0) { #Borrower is allowed to access this material, as he is older or as old as the agerestriction }
\&  if($daysToAgeRestriction > 0) { #Borrower is this many days from meeting the agerestriction }
.Ve
.PP
\&\f(CW@PARAM1\fR the koha.biblioitems.agerestriction value, like K18, \s-1PEGI\s0 13, ...
\&\f(CW@PARAM2\fR a borrower-object with koha.borrowers.dateofbirth. (\s-1OPTIONAL\s0)
\&\f(CW@RETURNS\fR The age restriction age in years and the days to fulfill the age restriction for the given borrower.
         Negative days mean the borrower has gone past the age restriction age.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Development Team <http://koha\-community.org/>
