.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Koha::Borrower::Debarments 3"
.TH Koha::Borrower::Debarments 3 "2015-11-02" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "Koha::Borrower::Debarments"
.IX Header "Koha::Borrower::Debarments"
Koha::Borrower::Debarments \- Module for managing borrower debarments
.SS "GetDebarments"
.IX Subsection "GetDebarments"
my \f(CW$arrayref\fR = GetDebarments({ borrowernumber => \f(CW$borrowernumber\fR [, key => \f(CW$value\fR ] );
.SS "AddDebarment"
.IX Subsection "AddDebarment"
my \f(CW$success\fR = AddDebarment({
    borrowernumber => \f(CW$borrowernumber\fR,
    expiration     => \f(CW$expiration\fR,
    type           => \f(CW$type\fR, ## enum('\s-1FINES\s0','\s-1OVERDUES\s0','\s-1MANUAL\s0')
    comment        => \f(CW$comment\fR,
});
.PP
Creates a new debarment.
.PP
Required keys: borrowernumber, type
.SS "DelDebarment"
.IX Subsection "DelDebarment"
my \f(CW$success\fR = DelDebarment( \f(CW$borrower_debarment_id\fR );
.PP
Deletes a debarment.
.SS "ModDebarment"
.IX Subsection "ModDebarment"
my \f(CW$success\fR = ModDebarment({
    borrower_debarment_id => \f(CW$borrower_debarment_id\fR,
    expiration            => \f(CW$expiration\fR,
    type                  => \f(CW$type\fR, ## enum('\s-1FINES\s0','\s-1OVERDUES\s0','\s-1MANUAL\s0')
    comment               => \f(CW$comment\fR,
});
.PP
Updates an existing debarment.
.PP
Required keys: borrower_debarment_id
.SS "IsDebarred"
.IX Subsection "IsDebarred"
my \f(CW$debarment_expiration\fR = IsDebarred( \f(CW$borrowernumber\fR );
.PP
Returns the date a borrowers debarment will expire, or
undef if the borrower is not debarred
.SS "AddUniqueDebarment"
.IX Subsection "AddUniqueDebarment"
my \f(CW$success\fR = AddUniqueDebarment({
    borrowernumber => \f(CW$borrowernumber\fR,
    type           => \f(CW$type\fR,
    expiration     => \f(CW$expiration\fR,
    comment        => \f(CW$comment\fR,
});
.PP
Creates a new debarment of the type defined by the key type.
If a unique debarment already exists of the given type, it is updated instead.
The current unique debarment types are \s-1OVERDUES\s0, and \s-1SUSPENSION\s0
.PP
Required keys: borrowernumber, type
.SS "DelUniqueDebarment"
.IX Subsection "DelUniqueDebarment"
my \f(CW$success\fR = _DelUniqueDebarment({
    borrowernumber => \f(CW$borrowernumber\fR,
    type           => \f(CW$type\fR,
});
.PP
Deletes a unique debarment of the type defined by the key type.
The current unique debarment types are \s-1OVERDUES\s0, and \s-1SUSPENSION\s0
.PP
Required keys: borrowernumber, type
.SS "_UpdateBorrowerDebarmentFlags"
.IX Subsection "_UpdateBorrowerDebarmentFlags"
my \f(CW$success\fR = _UpdateBorrowerDebarmentFlags( \f(CW$borrowernumber\fR );
.PP
So as not to create additional latency, the fields borrowers.debarred
and borrowers.debarredcomment remain in the borrowers table. Whenever
the a borrowers debarrments are modified, this subroutine is run to
decide if the borrower is currently debarred and update the 'quick flags'
in the borrowers table accordingly.
.SS "_GetBorrowernumberByDebarmentId"
.IX Subsection "_GetBorrowernumberByDebarmentId"
my \f(CW$borrowernumber\fR = _GetBorrowernumberByDebarmentId( \f(CW$borrower_debarment_id\fR );
.SS "\s-1AUTHOR\s0"
.IX Subsection "AUTHOR"
Kyle M Hall <kyle@bywatersoltuions.com>
