.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "circ::branchoverdues 3"
.TH circ::branchoverdues 3 "2015-11-02" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "branchoverdues.pl"
.IX Header "branchoverdues.pl"
.Vb 3
\& this module is a new interface, allow to the librarian to check all items on overdues (based on the acountlines type \*(AqFU\*(Aq )
\& this interface is filtered by branches (automatically), and by location (optional) ....
\& all informations are stocked in the notifys BDD
\&
\& FIXME for this time, we have only four methods to notify :
\&        \- mail : work with a batch programm
\&        \- letter : for us, the letters are generated by an open\-office program
\&        \- phone : Simple method, when the method \*(Aqphone\*(Aq is selected, we consider, that the borrower as been notified, and the notify send date is implemented
\&        \- considered lost : for us if the document is on the third overduelevel,
\&
\& FIXME the methods are actually hardcoded for the levels : (maybe can be improved by a new possibility in overduerule)
\&
\&        level 1 : three methods are possible : \- mail, letter, phone
\&        level 2 : only one method is possible : \- letter
\&        level 3 : only methode is possible  : \- Considered Lost
\&
\&        the documents displayed on this interface, are checked on three points
\&        \- 1) the document must be on accountlines (Type \*(AqFU\*(Aq)
\&        \- 2) item issues is not returned
\&        \- 3) this item as not been already notify
\&
\&  FIXME: who is the author?
\&  FIXME: No privisions (i.e. "actions") for handling notices are implemented.
\&  FIXME: This is linked as "Overdue Fines" but the relationship to fines in GetOverduesForBranch is more complicated than that.
.Ve
