.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "Koha::NorwegianPatronDB 3"
.TH Koha::NorwegianPatronDB 3 "2015-11-02" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Koha::NorwegianPatronDB
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Koha::NorwegianPatronDB;
.Ve
.SH "CONDITIONAL LOADING"
.IX Header "CONDITIONAL LOADING"
This module depends on some Perl modules that have not been marked as required.
This is because the module only will be of interest to Norwegian libraries, and
it seems polite not to bother the rest of the world with these modules. It is
also good practice to check that the module is actually needed before loading
it. So in a NorwegianPatronDB page or script it will be \s-1OK\s0 to just do:
.PP
.Vb 1
\&  use Koha::NorwegianPatronDB qw(...);
.Ve
.PP
But in scripts that are also used by others (like e.g. moremember.pl), it will
be polite to only load the module at runtime, if it is needed:
.PP
.Vb 4
\&  use Module::Load;
\&  if ( C4::Context\->preference(\*(AqNorwegianPatronDBEnable\*(Aq) && C4::Context\->preference(\*(AqNorwegianPatronDBEnable\*(Aq) == 1 ) {
\&      load Koha::NorwegianPatronDB, qw( NLGetSyncDataFromBorrowernumber );
\&  }
.Ve
.PP
(Module::Load::Conditional is used for this in other parts of Koha, but it does
not seem to allow for a list of subroutines to import, so Module::Load looks
like a better candidate.)
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "SOAP::Transport::HTTP::Client::get_basic_credentials"
.IX Subsection "SOAP::Transport::HTTP::Client::get_basic_credentials"
This is included to set the username and password used by SOAP::Lite.
.SS "NLCheckSysprefs"
.IX Subsection "NLCheckSysprefs"
Check that sysprefs relevant to \s-1NL\s0 are set.
.SS "NLSearch"
.IX Subsection "NLSearch"
Search the \s-1NL\s0 patron database.
.PP
\&\s-1SOAP\s0 call: \*(L"hent\*(R" (fetch)
.SS "NLSync"
.IX Subsection "NLSync"
Sync a patron that has been changed or created in Koha \*(L"upstream\*(R" to \s-1NL\s0.
.PP
Input is a hashref with one of two possible elements, either a patron retrieved
from the database:
.PP
.Vb 1
\&    my $result = NLSync({ \*(Aqpatron\*(Aq => $borrower_from_dbic });
.Ve
.PP
or a plain old borrowernumber:
.PP
.Vb 1
\&    my $result = NLSync({ \*(Aqborrowernumber\*(Aq => $borrowernumber });
.Ve
.PP
In the latter case, this function will retrieve the patron record from the
database using \s-1DBIC\s0.
.PP
Which part of the \s-1API\s0 is called depends on the value of the \*(L"syncstatus\*(R" column:
.IP "\(bu" 4
\&\fBnew\fR = The \fInyPost\fR (\*(L"new record\*(R") method is called.
.IP "\(bu" 4
\&\fBedited\fR = The \fIendre\fR (\*(L"change/update\*(R") method is called.
.IP "\(bu" 4
\&\fBdelete\fR = The \fIslett\fR (\*(L"delete\*(R") method is called.
.PP
Required values for \fBnew\fR and \fBedited\fR:
.IP "\(bu" 4
sist_endret (last updated)
.IP "\(bu" 4
adresse, postnr eller sted (address, zip or city)
.IP "\(bu" 4
fdato (birthdate)
.IP "\(bu" 4
fnr_hash (social security number, but not hashed...)
.IP "\(bu" 4
kjonn (gender, M/F)
.SS "NLGetChanged"
.IX Subsection "NLGetChanged"
Fetches patrons from \s-1NL\s0 that have been changed since a given timestamp. This includes
patrons that have been changed by the library that runs the sync, so we have to
check which library was the last one to change a patron, before we update patrons
locally.
.PP
This is supposed to be executed once per night.
.PP
\&\s-1SOAP\s0 call: soekEndret
.SS "NLMarkForDeletion"
.IX Subsection "NLMarkForDeletion"
Mark a borrower for deletion, but do not do the actual deletion. Deleting the
borrower from \s-1NL\s0 will be done later by the nl\-sync\-from\-koha.pl script.
.SS "NLDecodePin"
.IX Subsection "NLDecodePin"
Takes a string encoded with \s-1AES/ECB/PKCS5PADDING\s0 and a 128\-bits key, and returns
the decoded string as plain text.
.PP
The key needs to be stored in koha\-conf.xml, like so:
.PP
<yazgfs>
  ...
  <config>
    ...
    <nlkey>xyz</nlkey>
  </config>
</yazgfs>
.SS "NLEncryptPIN"
.IX Subsection "NLEncryptPIN"
Takes a plain text \s-1PIN\s0 as argument, returns the encrypted \s-1PIN\s0, according to the
\&\s-1NL\s0 specs.
.PP
.Vb 1
\&    my $encrypted_pin = NLEncryptPIN( $plain_text_pin );
.Ve
.SS "NLUpdateHashedPIN"
.IX Subsection "NLUpdateHashedPIN"
Takes two arguments:
.IP "\(bu" 4
Borrowernumber
.IP "\(bu" 4
Clear text \s-1PIN\s0 code
.PP
Hashes the password and saves it in borrower_sync.hashed_pin.
.SS "_encrypt_pin"
.IX Subsection "_encrypt_pin"
Takes a plain text \s-1PIN\s0 and returns the encrypted version, according to the \s-1NL\s0 specs.
.SS "NLGetSyncDataFromBorrowernumber"
.IX Subsection "NLGetSyncDataFromBorrowernumber"
Takes a borrowernumber as argument, returns a Koha::Schema::Result::BorrowerSync
object.
.PP
.Vb 1
\&    my $syncdata = NLGetSyncDataFromBorrowernumber( $borrowernumber );
.Ve
.SS "NLGetFirstname"
.IX Subsection "NLGetFirstname"
Takes a string like \*(L"Surname, Firstname\*(R" and returns the \*(L"Firstname\*(R" part.
.PP
If there is no comma, the string is returned unaltered.
.PP
.Vb 1
\&    my $firstname = NLGetFirstname( $name );
.Ve
.SS "NLGetSurname"
.IX Subsection "NLGetSurname"
Takes a string like \*(L"Surname, Firstname\*(R" and returns the \*(L"Surname\*(R" part.
.PP
If there is no comma, the string is returned unaltered.
.PP
.Vb 1
\&    my $surname = NLGetSurname( $name );
.Ve
.SS "_split_name"
.IX Subsection "_split_name"
Takes a string like \*(L"Surname, Firstname\*(R" and returns a list of surname and firstname.
.PP
If there is no comma, the string is returned unaltered.
.PP
.Vb 1
\&    my ( $surname, $firstname ) = _split_name( $name );
.Ve
.SS "_format_soap_error"
.IX Subsection "_format_soap_error"
Takes a soap result object as input and returns a formatted string containing \s-1SOAP\s0 error data.
.SS "_soap_to_koha_patron"
.IX Subsection "_soap_to_koha_patron"
Convert a \s-1SOAP\s0 object of type \*(L"Laaner\*(R" into a hash that can be sent to AddMember or ModMember.
.SS "_koha_patron_to_soap"
.IX Subsection "_koha_patron_to_soap"
Convert a patron (in the form of a Koha::Schema::Result::Borrower) into a \s-1SOAP\s0
object that can be sent to \s-1NL\s0.
.SH "EXPORT"
.IX Header "EXPORT"
None by default.
.SH "AUTHOR"
.IX Header "AUTHOR"
Magnus Enger <digitalutvikling@gmail.com>
