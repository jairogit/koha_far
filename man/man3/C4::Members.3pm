.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "C4::Members 3"
.TH C4::Members 3 "2015-11-02" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Members \- Perl Module containing convenience functions for member handling
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use C4::Members;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains routines for adding, modifying and deleting members/patrons/borrowers
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "Search"
.IX Subsection "Search"
.Vb 2
\&  $borrowers_result_array_ref = &Search($filter,$orderby, $limit, 
\&                       $columns_out, $search_on_fields,$searchtype);
.Ve
.PP
Looks up patrons (borrowers) on filter. A wrapper for SearchInTable('borrowers').
.PP
For \f(CW$filter\fR, \f(CW$orderby\fR, \f(CW$limit\fR, \f(CW&columns_out\fR, \f(CW&search_on_fields\fR and \f(CW&searchtype\fR
refer to \fIC4::SQLHelper:SearchInTable()\fR.
.PP
Special \f(CW$filter\fR key '' is effectively expanded to search on surname firstname othernamescw
and cardnumber unless \f(CW&search_on_fields\fR is defined
.PP
Examples:
.PP
.Vb 1
\&  $borrowers = Search(\*(Aqabcd\*(Aq, \*(Aqcardnumber\*(Aq);
\&
\&  $borrowers = Search({\*(Aq\*(Aq=>\*(Aqabcd\*(Aq, category_type=>\*(AqI\*(Aq}, \*(Aqsurname\*(Aq);
.Ve
.SS "GetMemberDetails"
.IX Subsection "GetMemberDetails"
($borrower) = &GetMemberDetails($borrowernumber, \f(CW$cardnumber\fR);
.PP
Looks up a patron and returns information about him or her. If
\&\f(CW$borrowernumber\fR is true (nonzero), \f(CW&GetMemberDetails\fR looks
up the borrower by number; otherwise, it looks up the borrower by card
number.
.PP
\&\f(CW$borrower\fR is a reference-to-hash whose keys are the fields of the
borrowers table in the Koha database. In addition,
\&\f(CW\*(C`$borrower\->{flags}\*(C'\fR is a hash giving more detailed information
about the patron. Its keys act as flags :
.PP
.Vb 3
\&    if $borrower\->{flags}\->{LOST} {
\&        # Patron\*(Aqs card was reported lost
\&    }
.Ve
.PP
If the state of a flag means that the patron should not be
allowed to borrow any more books, then it will have a \f(CW\*(C`noissues\*(C'\fR key
with a true value.
.PP
See patronflags for more details.
.PP
\&\f(CW\*(C`$borrower\->{authflags}\*(C'\fR is a hash giving more detailed information
about the top-level permissions flags set for the borrower.  For example,
if a user has the \*(L"editcatalogue\*(R" permission,
\&\f(CW\*(C`$borrower\->{authflags}\->{editcatalogue}\*(C'\fR will exist and have
the value \*(L"1\*(R".
.SS "patronflags"
.IX Subsection "patronflags"
.Vb 1
\& $flags = &patronflags($patron);
.Ve
.PP
This function is not exported.
.PP
The following will be set where applicable:
 \f(CW$flags\fR\->{\s-1CHARGES\s0}\->{amount}        Amount of debt
 \f(CW$flags\fR\->{\s-1CHARGES\s0}\->{noissues}      Set if debt amount >$5.00 (or syspref noissuescharge)
 \f(CW$flags\fR\->{\s-1CHARGES\s0}\->{message}       Message \*(-- deprecated
.PP
.Vb 2
\& $flags\->{CREDITS}\->{amount}        Amount of credit
\& $flags\->{CREDITS}\->{message}       Message \-\- deprecated
\&
\& $flags\->{  GNA  }                  Patron has no valid address
\& $flags\->{  GNA  }\->{noissues}      Set for each GNA
\& $flags\->{  GNA  }\->{message}       "Borrower has no valid address" \-\- deprecated
\&
\& $flags\->{ LOST  }                  Patron\*(Aqs card reported lost
\& $flags\->{ LOST  }\->{noissues}      Set for each LOST
\& $flags\->{ LOST  }\->{message}       Message \-\- deprecated
\&
\& $flags\->{DBARRED}                  Set if patron debarred, no access
\& $flags\->{DBARRED}\->{noissues}      Set for each DBARRED
\& $flags\->{DBARRED}\->{message}       Message \-\- deprecated
\&
\& $flags\->{ NOTES }
\& $flags\->{ NOTES }\->{message}       The note itself.  NOT deprecated
\&
\& $flags\->{ ODUES }                  Set if patron has overdue books.
\& $flags\->{ ODUES }\->{message}       "Yes"  \-\- deprecated
\& $flags\->{ ODUES }\->{itemlist}      ref\-to\-array: list of overdue books
\& $flags\->{ ODUES }\->{itemlisttext}  Text list of overdue items \-\- deprecated
\&
\& $flags\->{WAITING}                  Set if any of patron\*(Aqs reserves are available
\& $flags\->{WAITING}\->{message}       Message \-\- deprecated
\& $flags\->{WAITING}\->{itemlist}      ref\-to\-array: list of available items
.Ve
.ie n .IP """$flags\->{ODUES}\->{itemlist}"" is a reference-to-array listing the overdue items. Its elements are references-to-hash, each describing an overdue item. The keys are selected fields from the issues, biblio, biblioitems, and items tables of the Koha database." 4
.el .IP "\f(CW$flags\->{ODUES}\->{itemlist}\fR is a reference-to-array listing the overdue items. Its elements are references-to-hash, each describing an overdue item. The keys are selected fields from the issues, biblio, biblioitems, and items tables of the Koha database." 4
.IX Item "$flags->{ODUES}->{itemlist} is a reference-to-array listing the overdue items. Its elements are references-to-hash, each describing an overdue item. The keys are selected fields from the issues, biblio, biblioitems, and items tables of the Koha database."
.PD 0
.ie n .IP """$flags\->{ODUES}\->{itemlisttext}"" is a string giving a text listing of the overdue items, one per line.  Deprecated." 4
.el .IP "\f(CW$flags\->{ODUES}\->{itemlisttext}\fR is a string giving a text listing of the overdue items, one per line.  Deprecated." 4
.IX Item "$flags->{ODUES}->{itemlisttext} is a string giving a text listing of the overdue items, one per line.  Deprecated."
.ie n .IP """$flags\->{WAITING}\->{itemlist}"" is a reference-to-array listing the available items. Each element is a reference-to-hash whose keys are fields from the reserves table of the Koha database." 4
.el .IP "\f(CW$flags\->{WAITING}\->{itemlist}\fR is a reference-to-array listing the available items. Each element is a reference-to-hash whose keys are fields from the reserves table of the Koha database." 4
.IX Item "$flags->{WAITING}->{itemlist} is a reference-to-array listing the available items. Each element is a reference-to-hash whose keys are fields from the reserves table of the Koha database."
.PD
.PP
All the \*(L"message\*(R" fields that include language generated in this function are deprecated, 
because such strings belong properly in the display layer.
.PP
The \*(L"message\*(R" field that comes from the \s-1DB\s0 is \s-1OK\s0.
.SS "GetMember"
.IX Subsection "GetMember"
.Vb 1
\&  $borrower = &GetMember(%information);
.Ve
.PP
Retrieve the first patron record meeting on criteria listed in the
\&\f(CW%information\fR hash, which should contain one or more
pairs of borrowers column names and values, e.g.,
.PP
.Vb 1
\&   $borrower = GetMember(borrowernumber => id);
.Ve
.PP
\&\f(CW&GetBorrower\fR returns a reference-to-hash whose keys are the fields of
the \f(CW\*(C`borrowers\*(C'\fR table in the Koha database.
.PP
\&\s-1FIXME:\s0 \fIGetMember()\fR is used throughout the code as a lookup
on a unique key such as the borrowernumber, but this meaning is not
enforced in the routine itself.
.SS "GetMemberRelatives"
.IX Subsection "GetMemberRelatives"
.Vb 1
\& @borrowernumbers = GetMemberRelatives($borrowernumber);
\&
\& C<GetMemberRelatives> returns a borrowersnumber\*(Aqs list of guarantor/guarantees of the member given in parameter
.Ve
.SS "IsMemberBlocked"
.IX Subsection "IsMemberBlocked"
.Vb 1
\&  my ($block_status, $count) = IsMemberBlocked( $borrowernumber );
.Ve
.PP
Returns whether a patron has overdue items that may result
in a block or whether the patron has active fine days
that would block circulation privileges.
.PP
\&\f(CW$block_status\fR can have the following values:
.PP
1 if the patron has outstanding fine days or a manual debarment, in which case
\&\f(CW$count\fR is the expiration date (9999\-12\-31 for indefinite)
.PP
\&\-1 if the patron has overdue items, in which case \f(CW$count\fR is the number of them
.PP
0 if the patron has no overdue items or outstanding fine days, in which case \f(CW$count\fR is 0
.PP
Outstanding fine days are checked before current overdue items
are.
.PP
\&\s-1FIXME:\s0 this needs to be split into two functions; a potential block
based on the number of current overdue items could be orthogonal
to a block based on whether the patron has any fine days accrued.
.SS "GetMemberIssuesAndFines"
.IX Subsection "GetMemberIssuesAndFines"
.Vb 1
\&  ($overdue_count, $issue_count, $total_fines) = &GetMemberIssuesAndFines($borrowernumber);
.Ve
.PP
Returns aggregate data about items borrowed by the patron with the
given borrowernumber.
.PP
\&\f(CW&GetMemberIssuesAndFines\fR returns a three-element array.  \f(CW$overdue_count\fR is the
number of overdue items the patron currently has borrowed. \f(CW$issue_count\fR is the
number of books the patron currently has borrowed.  \f(CW$total_fines\fR is
the total fine currently due by the borrower.
.SS "columns"
.IX Subsection "columns"
.Vb 1
\&  my @columns = C4::Member::columns();
.Ve
.PP
Returns an array of borrowers' table columns on success,
and an empty array on failure.
.SS "ModMember"
.IX Subsection "ModMember"
.Vb 2
\&  my $success = ModMember(borrowernumber => $borrowernumber,
\&                                            [ field => value ]... );
.Ve
.PP
Modify borrower's data.  All date fields should \s-1ALREADY\s0 be in \s-1ISO\s0 format.
.PP
return :
true on success, or false on failure
.SS "AddMember"
.IX Subsection "AddMember"
.Vb 1
\&  $borrowernumber = &AddMember(%borrower);
.Ve
.PP
insert new borrower into table
.PP
(%borrower keys are database columns. Database columns could be
different in different versions. Please look into database for correct
column names.)
.PP
Returns the borrowernumber upon success
.PP
Returns as undef upon any db error without further processing
.SS "Check_Userid"
.IX Subsection "Check_Userid"
.Vb 1
\&    my $uniqueness = Check_Userid($userid,$borrowernumber);
\&
\&    $borrowernumber is optional (i.e. it can contain a blank value). If $userid is passed with a blank $borrowernumber variable, the database will be checked for all instances of that userid (i.e. userid=? AND borrowernumber != \*(Aq\*(Aq).
\&
\&    If $borrowernumber is provided, the database will be checked for every instance of that userid coupled with a different borrower(number) than the one provided.
\&
\&    return :
\&        0 for not unique (i.e. this $userid already exists)
\&        1 for unique (i.e. this $userid does not exist, or this $userid/$borrowernumber combination already exists)
.Ve
.SS "Generate_Userid"
.IX Subsection "Generate_Userid"
.Vb 1
\&    my $newuid = Generate_Userid($borrowernumber, $firstname, $surname);
\&
\&    Generate a userid using the $surname and the $firstname (if there is a value in $firstname).
\&
\&    $borrowernumber is optional (i.e. it can contain a blank value). A value is passed when generating a new userid for an existing borrower. When a new userid is created for a new borrower, a blank value is passed to this sub.
\&
\&    return :
\&        new userid ($firstname.$surname if there is a $firstname, or $surname if there is no value in $firstname) plus offset (0 if the $newuid is unique, or a higher numeric value if Check_Userid finds an existing match for the $newuid in the database).
.Ve
.SS "fixup_cardnumber"
.IX Subsection "fixup_cardnumber"
Warning: The caller is responsible for locking the members table in write
mode, to avoid database corruption.
.SS "GetGuarantees"
.IX Subsection "GetGuarantees"
.Vb 3
\&  ($num_children, $children_arrayref) = &GetGuarantees($parent_borrno);
\&  $child0_cardno = $children_arrayref\->[0]{"cardnumber"};
\&  $child0_borrno = $children_arrayref\->[0]{"borrowernumber"};
.Ve
.PP
\&\f(CW&GetGuarantees\fR takes a borrower number (e.g., that of a patron
with children) and looks up the borrowers who are guaranteed by that
borrower (i.e., the patron's children).
.PP
\&\f(CW&GetGuarantees\fR returns two values: an integer giving the number of
borrowers guaranteed by \f(CW$parent_borrno\fR, and a reference to an array
of references to hash, which gives the actual results.
.SS "UpdateGuarantees"
.IX Subsection "UpdateGuarantees"
.Vb 1
\&  &UpdateGuarantees($parent_borrno);
.Ve
.PP
\&\f(CW&UpdateGuarantees\fR borrower data for an adult and updates all the guarantees
with the modified information
.SS "GetPendingIssues"
.IX Subsection "GetPendingIssues"
.Vb 1
\&  my $issues = &GetPendingIssues(@borrowernumber);
.Ve
.PP
Looks up what the patron with the given borrowernumber has borrowed.
.PP
\&\f(CW&GetPendingIssues\fR returns a
reference-to-array where each element is a reference-to-hash; the
keys are the fields from the \f(CW\*(C`issues\*(C'\fR, \f(CW\*(C`biblio\*(C'\fR, and \f(CW\*(C`items\*(C'\fR tables.
The keys include \f(CW\*(C`biblioitems\*(C'\fR fields except marc and marcxml.
.SS "GetAllIssues"
.IX Subsection "GetAllIssues"
.Vb 1
\&  $issues = &GetAllIssues($borrowernumber, $sortkey, $limit);
.Ve
.PP
Looks up what the patron with the given borrowernumber has borrowed,
and sorts the results.
.PP
\&\f(CW$sortkey\fR is the name of a field on which to sort the results. This
should be the name of a field in the \f(CW\*(C`issues\*(C'\fR, \f(CW\*(C`biblio\*(C'\fR,
\&\f(CW\*(C`biblioitems\*(C'\fR, or \f(CW\*(C`items\*(C'\fR table in the Koha database.
.PP
\&\f(CW$limit\fR is the maximum number of results to return.
.PP
\&\f(CW&GetAllIssues\fR an arrayref, \f(CW$issues\fR, of hashrefs, the keys of which
are the fields from the \f(CW\*(C`issues\*(C'\fR, \f(CW\*(C`biblio\*(C'\fR, \f(CW\*(C`biblioitems\*(C'\fR, and
\&\f(CW\*(C`items\*(C'\fR tables of the Koha database.
.SS "GetMemberAccountRecords"
.IX Subsection "GetMemberAccountRecords"
.Vb 1
\&  ($total, $acctlines, $count) = &GetMemberAccountRecords($borrowernumber);
.Ve
.PP
Looks up accounting data for the patron with the given borrowernumber.
.PP
\&\f(CW&GetMemberAccountRecords\fR returns a three-element array. \f(CW$acctlines\fR is a
reference-to-array, where each element is a reference-to-hash; the
keys are the fields of the \f(CW\*(C`accountlines\*(C'\fR table in the Koha database.
\&\f(CW$count\fR is the number of elements in \f(CW$acctlines\fR. \f(CW$total\fR is the
total amount outstanding for all of the account lines.
.SS "GetMemberAccountBalance"
.IX Subsection "GetMemberAccountBalance"
.Vb 1
\&  ($total_balance, $non_issue_balance, $other_charges) = &GetMemberAccountBalance($borrowernumber);
.Ve
.PP
Calculates amount immediately owing by the patron \- non-issue charges.
Based on GetMemberAccountRecords.
Charges exempt from non-issue are:
* Res (reserves)
* Rent (rental) if RentalsInNoissuesCharge syspref is set to false
* Manual invoices if ManInvInNoissuesCharge syspref is set to false
.SS "GetBorNotifyAcctRecord"
.IX Subsection "GetBorNotifyAcctRecord"
.Vb 1
\&  ($total, $acctlines, $count) = &GetBorNotifyAcctRecord($params,$notifyid);
.Ve
.PP
Looks up accounting data for the patron with the given borrowernumber per file number.
.PP
\&\f(CW&GetBorNotifyAcctRecord\fR returns a three-element array. \f(CW$acctlines\fR is a
reference-to-array, where each element is a reference-to-hash; the
keys are the fields of the \f(CW\*(C`accountlines\*(C'\fR table in the Koha database.
\&\f(CW$count\fR is the number of elements in \f(CW$acctlines\fR. \f(CW$total\fR is the
total amount outstanding for all of the account lines.
.SS "checkuniquemember (OUEST-PROVENCE)"
.IX Subsection "checkuniquemember (OUEST-PROVENCE)"
.Vb 1
\&  ($result,$categorycode)  = &checkuniquemember($collectivity,$surname,$firstname,$dateofbirth);
.Ve
.PP
Checks that a member exists or not in the database.
.PP
\&\f(CW&result\fR is nonzero (=exist) or 0 (=does not exist)
\&\f(CW&categorycode\fR is from categorycode table
\&\f(CW&collectivity\fR is 1 (= we add a collectivity) or 0 (= we add a physical member)
\&\f(CW&surname\fR is the surname
\&\f(CW&firstname\fR is the firstname (only if collectivity=0)
\&\f(CW&dateofbirth\fR is the date of birth in \s-1ISO\s0 format (only if collectivity=0)
.SS "get_cardnumber_length"
.IX Subsection "get_cardnumber_length"
.Vb 1
\&    my ($min, $max) = C4::Members::get_cardnumber_length()
.Ve
.PP
Returns the minimum and maximum length for patron cardnumbers as
determined by the CardnumberLength system preference, the
BorrowerMandatoryField system preference, and the width of the
database column.
.SS "getzipnamecity (OUEST-PROVENCE)"
.IX Subsection "getzipnamecity (OUEST-PROVENCE)"
take all info from table city for the fields city and  zip
check for the name and the zip code of the city selected
.SS "getdcity (OUEST-PROVENCE)"
.IX Subsection "getdcity (OUEST-PROVENCE)"
recover cityid  with city_name condition
.SS "GetFirstValidEmailAddress"
.IX Subsection "GetFirstValidEmailAddress"
.Vb 1
\&  $email = GetFirstValidEmailAddress($borrowernumber);
.Ve
.PP
Return the first valid email address for a borrower, given the borrowernumber.  For now, the order 
is defined as email, emailpro, B_email.  Returns the empty string if the borrower has no email 
addresses.
.SS "GetNoticeEmailAddress"
.IX Subsection "GetNoticeEmailAddress"
.Vb 1
\&  $email = GetNoticeEmailAddress($borrowernumber);
.Ve
.PP
Return the email address of borrower used for notices, given the borrowernumber.
Returns the empty string if no email address.
.SS "GetExpiryDate"
.IX Subsection "GetExpiryDate"
.Vb 1
\&  $expirydate = GetExpiryDate($categorycode, $dateenrolled);
.Ve
.PP
Calculate expiry date given a categorycode and starting date.  Date argument must be in \s-1ISO\s0 format.
Return date is also in \s-1ISO\s0 format.
.SS "GetborCatFromCatType"
.IX Subsection "GetborCatFromCatType"
.Vb 1
\&  ($codes_arrayref, $labels_hashref) = &GetborCatFromCatType();
.Ve
.PP
Looks up the different types of borrowers in the database. Returns two
elements: a reference-to-array, which lists the borrower category
codes, and a reference-to-hash, which maps the borrower category codes
to category descriptions.
.SS "GetBorrowercategory"
.IX Subsection "GetBorrowercategory"
.Vb 1
\&  $hashref = &GetBorrowercategory($categorycode);
.Ve
.PP
Given the borrower's category code, the function returns the corresponding
data hashref for a comprehensive information display.
.SS "GetBorrowerCategorycode"
.IX Subsection "GetBorrowerCategorycode"
.Vb 1
\&    $categorycode = &GetBorrowerCategoryCode( $borrowernumber );
.Ve
.PP
Given the borrowernumber, the function returns the corresponding categorycode
.SS "GetBorrowercategoryList"
.IX Subsection "GetBorrowercategoryList"
.Vb 2
\&  $arrayref_hashref = &GetBorrowercategoryList;
\&If no category code provided, the function returns all the categories.
.Ve
.SS "ethnicitycategories"
.IX Subsection "ethnicitycategories"
.Vb 1
\&  ($codes_arrayref, $labels_hashref) = &ethnicitycategories();
.Ve
.PP
Looks up the different ethnic types in the database. Returns two
elements: a reference-to-array, which lists the ethnicity codes, and a
reference-to-hash, which maps the ethnicity codes to ethnicity
descriptions.
.SS "fixEthnicity"
.IX Subsection "fixEthnicity"
.Vb 1
\&  $ethn_name = &fixEthnicity($ethn_code);
.Ve
.PP
Takes an ethnicity code (e.g., \*(L"european\*(R" or \*(L"pi\*(R") and returns the
corresponding descriptive name from the \f(CW\*(C`ethnicity\*(C'\fR table in the
Koha database (\*(L"European\*(R" or \*(L"Pacific Islander\*(R").
.SS "GetAge"
.IX Subsection "GetAge"
.Vb 1
\&  $dateofbirth,$date = &GetAge($date);
.Ve
.PP
this function return the borrowers age with the value of dateofbirth
.SS "SetAge"
.IX Subsection "SetAge"
.Vb 3
\&  $borrower = C4::Members::SetAge($borrower, $datetimeduration);
\&  $borrower = C4::Members::SetAge($borrower, \*(Aq0015\-12\-10\*(Aq);
\&  $borrower = C4::Members::SetAge($borrower, $datetimeduration, $datetime_reference);
\&
\&  eval { $borrower = C4::Members::SetAge($borrower, \*(Aq015\-1\-10\*(Aq); };
\&  if ($@) {print $@;} #Catch a bad ISO Date or kill your script!
.Ve
.PP
This function sets the borrower's dateofbirth to match the given age.
Optionally relative to the given \f(CW$datetime_reference\fR.
.PP
\&\f(CW@PARAM1\fR koha.borrowers\-object
\&\f(CW@PARAM2\fR DateTime::Duration\-object as the desired age
        \s-1OR\s0 a \s-1ISO\s0 8601 Date. (To make the \s-1API\s0 more pleasant)
\&\f(CW@PARAM3\fR DateTime-object as the relative date, defaults to \fInow()\fR.
\&\s-1RETURNS\s0 The given borrower reference \f(CW@PARAM1\fR.
\&\s-1DIES\s0    If there was an error with the \s-1ISO\s0 Date handling.
.SS "GetCities"
.IX Subsection "GetCities"
.Vb 1
\&  $cityarrayref = GetCities();
\&
\&  Returns an array_ref of the entries in the cities table
\&  If there are entries in the table an empty row is returned
\&  This is currently only used to populate a popup in memberentry
.Ve
.SS "GetSortDetails (OUEST-PROVENCE)"
.IX Subsection "GetSortDetails (OUEST-PROVENCE)"
.Vb 1
\&  ($lib) = &GetSortDetails($category,$sortvalue);
.Ve
.PP
Returns the authorized value  details
\&\f(CW&$lib\fRreturn value of authorized value details
\&\f(CW&$sortvalue\fRthis is the value of authorized value 
\&\f(CW&$category\fRthis is the value of authorized value category
.SS "MoveMemberToDeleted"
.IX Subsection "MoveMemberToDeleted"
.Vb 1
\&  $result = &MoveMemberToDeleted($borrowernumber);
.Ve
.PP
Copy the record from borrowers to deletedborrowers table.
The routine returns 1 for success, undef for failure.
.SS "DelMember"
.IX Subsection "DelMember"
.Vb 1
\&    DelMember($borrowernumber);
.Ve
.PP
This function remove directly a borrower whitout writing it on deleteborrower.
+ Deletes reserves for the borrower
.SS "ExtendMemberSubscriptionTo (OUEST-PROVENCE)"
.IX Subsection "ExtendMemberSubscriptionTo (OUEST-PROVENCE)"
.Vb 1
\&    $date = ExtendMemberSubscriptionTo($borrowerid, $date);
.Ve
.PP
Extending the subscription to a given date or to the expiry date calculated on \s-1ISO\s0 date.
Returns \s-1ISO\s0 date.
.SS "GetTitles (OUEST-PROVENCE)"
.IX Subsection "GetTitles (OUEST-PROVENCE)"
.Vb 1
\&  ($borrowertitle)= &GetTitles();
.Ve
.PP
Looks up the different title . Returns array  with all borrowers title
.SS "GetPatronImage"
.IX Subsection "GetPatronImage"
.Vb 1
\&    my ($imagedata, $dberror) = GetPatronImage($borrowernumber);
.Ve
.PP
Returns the mimetype and binary image data of the image for the patron with the supplied borrowernumber.
.SS "PutPatronImage"
.IX Subsection "PutPatronImage"
.Vb 1
\&    PutPatronImage($cardnumber, $mimetype, $imgfile);
.Ve
.PP
Stores patron binary image data and mimetype in database.
\&\s-1NOTE:\s0 This function is good for updating images as well as inserting new images in the database.
.SS "RmPatronImage"
.IX Subsection "RmPatronImage"
.Vb 1
\&    my ($dberror) = RmPatronImage($borrowernumber);
.Ve
.PP
Removes the image for the patron with the supplied borrowernumber.
.SS "GetHideLostItemsPreference"
.IX Subsection "GetHideLostItemsPreference"
.Vb 1
\&  $hidelostitemspref = &GetHideLostItemsPreference($borrowernumber);
.Ve
.PP
Returns the HideLostItems preference for the patron category of the supplied borrowernumber
\&\f(CW&$hidelostitemspref\fRreturn value of function, 0 or 1
.SS "GetBorrowersToExpunge"
.IX Subsection "GetBorrowersToExpunge"
.Vb 6
\&  $borrowers = &GetBorrowersToExpunge(
\&      not_borrowered_since => $not_borrowered_since,
\&      expired_before       => $expired_before,
\&      category_code        => $category_code,
\&      branchcode           => $branchcode
\&  );
\&
\&  This function get all borrowers based on the given criteria.
.Ve
.SS "GetBorrowersWhoHaveNeverBorrowed"
.IX Subsection "GetBorrowersWhoHaveNeverBorrowed"
.Vb 1
\&  $results = &GetBorrowersWhoHaveNeverBorrowed
.Ve
.PP
This function get all borrowers who have never borrowed.
.PP
\&\fI\f(CI$result\fI\fR is a ref to an array which all elements are a hasref.
.SS "GetBorrowersWithIssuesHistoryOlderThan"
.IX Subsection "GetBorrowersWithIssuesHistoryOlderThan"
.Vb 1
\&  $results = &GetBorrowersWithIssuesHistoryOlderThan($date)
.Ve
.PP
this function get all borrowers who has an issue history older than \fI\f(CI$date\fI\fR given on input arg.
.PP
\&\fI\f(CI$result\fI\fR is a ref to an array which all elements are a hashref.
This hashref is containt the number of time this borrowers has borrowed before \fI\f(CI$date\fI\fR and the borrowernumber.
.SS "GetBorrowersNamesAndLatestIssue"
.IX Subsection "GetBorrowersNamesAndLatestIssue"
.Vb 1
\&  $results = &GetBorrowersNamesAndLatestIssueList(@borrowernumbers)
.Ve
.PP
this function get borrowers Names and surnames and Issue information.
.PP
\&\fI\f(CI@borrowernumbers\fI\fR is an array which all elements are borrowernumbers.
This hashref is containt the number of time this borrowers has borrowed before \fI\f(CI$date\fI\fR and the borrowernumber.
.SS "ModPrivacy"
.IX Subsection "ModPrivacy"
.Vb 1
\&  my $success = ModPrivacy( $borrowernumber, $privacy );
.Ve
.PP
Update the privacy of a patron.
.PP
return :
true on success, false on failure
.SS "AddMessage"
.IX Subsection "AddMessage"
.Vb 1
\&  AddMessage( $borrowernumber, $message_type, $message, $branchcode );
.Ve
.PP
Adds a message to the messages table for the given borrower.
.PP
Returns:
  True on success
  False on failure
.SS "GetMessages"
.IX Subsection "GetMessages"
.Vb 1
\&  GetMessages( $borrowernumber, $type );
.Ve
.PP
\&\f(CW$type\fR is message type, B for borrower, or L for Librarian.
Empty type returns all messages of any type.
.PP
Returns all messages for the given borrowernumber
.SS "GetMessages"
.IX Subsection "GetMessages"
.Vb 1
\&  GetMessagesCount( $borrowernumber, $type );
.Ve
.PP
\&\f(CW$type\fR is message type, B for borrower, or L for Librarian.
Empty type returns all messages of any type.
.PP
Returns the number of messages for the given borrowernumber
.SS "DeleteMessage"
.IX Subsection "DeleteMessage"
.Vb 1
\&  DeleteMessage( $message_id );
.Ve
.SS "IssueSlip"
.IX Subsection "IssueSlip"
.Vb 1
\&  IssueSlip($branchcode, $borrowernumber, $quickslip)
\&
\&  Returns letter hash ( see C4::Letters::GetPreparedLetter )
\&
\&  $quickslip is boolean, to indicate whether we want a quick slip
.Ve
.SS "GetBorrowersWithEmail"
.IX Subsection "GetBorrowersWithEmail"
.Vb 1
\&    ([$borrnum,$userid], ...) = GetBorrowersWithEmail(\*(Aqme@example.com\*(Aq);
.Ve
.PP
This gets a list of users and their basic details from their email address.
As it's possible for multiple user to have the same email address, it provides
you with all of them. If there is no userid for the user, there will be an
\&\f(CW\*(C`undef\*(C'\fR there. An empty list will be returned if there are no matches.
.SS "AddEnrolmentFeeIfNeeded"
.IX Subsection "AddEnrolmentFeeIfNeeded"
.Vb 1
\&    AddEnrolmentFeeIfNeeded( $borrower\->{categorycode}, $borrower\->{borrowernumber} );
.Ve
.PP
Add enrolment fee for a patron if needed.
.SH "AUTHOR"
.IX Header "AUTHOR"
Koha Team
