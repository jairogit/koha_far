.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "C4::Installer 3"
.TH C4::Installer 3 "2015-11-02" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Installer
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\& use C4::Installer;
\& my $installer = C4::Installer\->new();
\& my $all_languages = getAllLanguages();
\& my $error = $installer\->load_db_schema();
\& my $list;
\& #fill $list with list of sql files
\& my ($fwk_language, $error_list) = $installer\->load_sql_in_order($all_languages, @$list);
\& $installer\->set_version_syspref();
\& $installer\->set_marcflavour_syspref(\*(AqMARC21\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $installer = C4::Installer\->new();
.Ve
.PP
Creates a new installer.
.SS "marc_framework_sql_list"
.IX Subsection "marc_framework_sql_list"
.Vb 2
\&  my ($defaulted_to_en, $list) = 
\&     $installer\->marc_framework_sql_list($lang, $marcflavour);
.Ve
.PP
Returns in \f(CW$list\fR a structure listing the filename, description, section,
and mandatory/optional status of \s-1MARC\s0 framework scripts available for \f(CW$lang\fR
and \f(CW$marcflavour\fR.
.PP
If the \f(CW$defaulted_to_en\fR return value is true, no scripts are available
for language \f(CW$lang\fR and the 'en' ones are returned.
.SS "sample_data_sql_list"
.IX Subsection "sample_data_sql_list"
.Vb 1
\&  my ($defaulted_to_en, $list) = $installer\->sample_data_sql_list($lang);
.Ve
.PP
Returns in \f(CW$list\fR a structure listing the filename, description, section,
and mandatory/optional status of sample data scripts available for \f(CW$lang\fR.
If the \f(CW$defaulted_to_en\fR return value is true, no scripts are available
for language \f(CW$lang\fR and the 'en' ones are returned.
.SS "load_db_schema"
.IX Subsection "load_db_schema"
.Vb 1
\&  my $error = $installer\->load_db_schema();
.Ve
.PP
Loads the \s-1SQL\s0 script that creates Koha's tables and indexes.  The
return value is a string containing error messages reported by the
load.
.SS "load_sql_in_order"
.IX Subsection "load_sql_in_order"
.Vb 1
\&  my ($fwk_language, $list) = $installer\->load_sql_in_order($all_languages, @sql_list);
.Ve
.PP
Given a list of \s-1SQL\s0 scripts supplied in \f(CW@sql_list\fR, loads each of them
into the database and sets the FrameworksLoaded system preference to names
of the scripts that were loaded.
.PP
The \s-1SQL\s0 files are loaded in alphabetical order by filename (not including
directory path).  This means that dependencies among the scripts are to
be resolved by carefully naming them, keeping in mind that the directory name
does *not* currently count.
.PP
\&\fB\s-1FIXME:\s0\fR this is a rather delicate way of dealing with dependencies between
the install scripts.
.PP
The return value \f(CW$list\fR is an arrayref containing a hashref for each
\&\*(L"level\*(R" or directory containing \s-1SQL\s0 scripts; the hashref in turns contains
a list of hashrefs containing a list of each script load and any error
messages associated with the loading of each script.
.PP
\&\fB\s-1FIXME:\s0\fR The \f(CW$fwk_language\fR code probably doesn't belong and needs to be
moved to a different method.
.SS "set_marcflavour_syspref"
.IX Subsection "set_marcflavour_syspref"
.Vb 1
\&  $installer\->set_marcflavour_syspref($marcflavour);
.Ve
.PP
Set the 'marcflavour' system preference.  The incoming
\&\f(CW$marcflavour\fR references to a subdirectory of
installer/data/$dbms/$lang/marcflavour, and is
normalized to \s-1MARC21\s0, \s-1UNIMARC\s0 or \s-1NORMARC\s0.
.PP
\&\s-1FIXME:\s0 this method assumes that the \s-1MARC\s0 flavour will be either
\&\s-1MARC21\s0, \s-1UNIMARC\s0 or \s-1NORMARC\s0.
.SS "set_version_syspref"
.IX Subsection "set_version_syspref"
.Vb 1
\&  $installer\->set_version_syspref();
.Ve
.PP
Set or update the 'Version' system preference to the current
Koha software version.
.SS "load_sql"
.IX Subsection "load_sql"
.Vb 1
\&  my $error = $installer\->load_sql($filename);
.Ve
.PP
Runs a the specified \s-1SQL\s0 using the \s-1DB\s0's command-line
\&\s-1SQL\s0 tool, and returns any strings sent to \s-1STDERR\s0
by the command-line tool.
.PP
\&\fB\s-1FIXME:\s0\fR there has been a long-standing desire to
replace this with an \s-1SQL\s0 loader that goes
through \s-1DBI\s0; partly for portability issues
and partly to improve error handling.
.PP
\&\fB\s-1FIXME:\s0\fR even using the command-line loader, some more
basic error handling should be added \- deal
with missing files, e.g.
.SS "get_file_path_from_name"
.IX Subsection "get_file_path_from_name"
.Vb 1
\&  my $filename = $installer\->get_file_path_from_name(\*(Aqscript_name\*(Aq);
.Ve
.PP
searches through the set of known \s-1SQL\s0 scripts and finds the fully
qualified path name for the script that mathches the input.
.PP
returns undef if no match was found.
.SH "AUTHOR"
.IX Header "AUTHOR"
C4::Installer is a refactoring of logic originally from installer/installer.pl, which was
originally written by Henri-Damien Laurant.
.PP
Koha Development Team <http://koha\-community.org/>
.PP
Galen Charlton <galen.charlton@liblime.com>
