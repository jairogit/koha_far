.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "C4::Utils::DataTables 3"
.TH C4::Utils::DataTables 3 "2015-11-02" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Utils::DataTables \- Utility subs for building query when DataTables source is AJAX
.SH "SYNOPSYS"
.IX Header "SYNOPSYS"
.Vb 3
\&    use CGI;
\&    use C4::Context;
\&    use C4::Utils::DataTables;
\&
\&    my $input = new CGI;
\&    my $vars = $input\->Vars;
\&
\&    my $query = qq{
\&        SELECT surname, firstname
\&        FROM borrowers
\&        WHERE borrowernumber = ?
\&    };
\&    my ($having, $having_params) = dt_build_having($vars);
\&    $query .= $having;
\&    $query .= dt_build_orderby($vars);
\&    $query .= " LIMIT ?,? ";
\&
\&    my $dbh = C4::Context\->dbh;
\&    my $sth = $dbh\->prepare($query);
\&    $sth\->execute(
\&        $vars\->{\*(Aqborrowernumber\*(Aq},
\&        @$having_params,
\&        $vars\->{\*(AqiDisplayStart\*(Aq},
\&        $vars\->{\*(AqiDisplayLength\*(Aq}
\&    );
\&    ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 3
\&    This module provide two utility functions to build a part of the SQL query,
\&    depending on DataTables parameters.
\&    One function build the \*(AqORDER BY\*(Aq part, and the other the \*(AqHAVING\*(Aq part.
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "dt_build_orderby"
.IX Subsection "dt_build_orderby"
.Vb 7
\&    my $orderby = dt_build_orderby($dt_param);
\&    This function takes a reference to a hash containing DataTables parameters
\&    and build the corresponding \*(AqORDER BY\*(Aq clause.
\&    This hash must contains the following keys:
\&        iSortCol_N, where N is a number from 0 to the number of columns to sort on minus 1
\&        sSortDir_N is the sorting order (\*(Aqasc\*(Aq or \*(Aqdesc) for the corresponding column
\&        mDataProp_N is a mapping between the column index, and the name of a SQL field
.Ve
.SS "dt_build_having"
.IX Subsection "dt_build_having"
.Vb 1
\&    my ($having, $having_params) = dt_build_having($dt_params)
\&
\&    This function takes a reference to a hash containing DataTables parameters
\&    and build the corresponding \*(AqHAVING\*(Aq clause.
\&    This hash must contains the following keys:
\&        sSearch is the text entered in the global filter
\&        iColumns is the number of columns
\&        bSearchable_N is a boolean value that is true if the column is searchable
\&        mDataProp_N is a mapping between the column index, and the name of a SQL field
\&        sSearch_N is the text entered in individual filter for column N
.Ve
.SS "dt_get_params"
.IX Subsection "dt_get_params"
.Vb 3
\&    my %dtparam = = dt_get_params( $input )
\&    This function takes a reference to a new CGI object.
\&    It prepares a hash containing Datatable parameters.
.Ve
.SS "dt_build_query_simple"
.IX Subsection "dt_build_query_simple"
.Vb 1
\&    my ( $query, $params )= dt_build_query_simple( $value, $field )
\&
\&    This function takes a value and a field (table.field).
\&
\&    It returns (undef, []) if not $value.
\&    Else, returns a SQL where string and an arrayref containing parameters
\&    for the execute method of the statement.
.Ve
.SS "dt_build_query_dates"
.IX Subsection "dt_build_query_dates"
.Vb 1
\&    my ( $query, $params )= dt_build_query_dates( $datefrom, $dateto, $field)
\&
\&    This function takes a datefrom, dateto and a field (table.field).
\&
\&    It returns (undef, []) if not $value.
\&    Else, returns a SQL where string and an arrayref containing parameters
\&    for the execute method of the statement.
.Ve
.SS "dt_build_query"
.IX Subsection "dt_build_query"
.Vb 1
\&    my ( $query, $filter ) = dt_build_query( $type, @params )
\&
\&    This function takes a value and a list of parameters.
\&
\&    It calls dt_build_query_dates or dt_build_query_simple function of $type.
\&
\&    $type can contain \*(Aqsimple\*(Aq or \*(Aqrange_dates\*(Aq.
\&    if $type is not matched it returns undef
.Ve
