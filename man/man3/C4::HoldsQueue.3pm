.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "C4::HoldsQueue 3"
.TH C4::HoldsQueue 3 "2015-11-02" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "TransportCostMatrix"
.IX Subsection "TransportCostMatrix"
.Vb 1
\&  TransportCostMatrix();
.Ve
.PP
Returns Transport Cost Matrix as a hashref <to branch code> => <from branch code> => cost
.SS "UpdateTransportCostMatrix"
.IX Subsection "UpdateTransportCostMatrix"
.Vb 1
\&  UpdateTransportCostMatrix($records);
.Ve
.PP
Updates full Transport Cost Matrix table. \f(CW$records\fR is an arrayref of records.
Records: { frombranch => <code>, tobranch => <code>, cost => <figure>, disable_transfer => <0,1> }
.SS "GetHoldsQueueItems"
.IX Subsection "GetHoldsQueueItems"
.Vb 1
\&  GetHoldsQueueItems($branch);
.Ve
.PP
Returns hold queue for a holding branch. If branch is omitted, then whole queue is returned
.SS "CreateQueue"
.IX Subsection "CreateQueue"
.Vb 1
\&  CreateQueue();
.Ve
.PP
Top level function that turns reserves into tmp_holdsqueue and hold_fill_targets.
.SS "GetBibsWithPendingHoldRequests"
.IX Subsection "GetBibsWithPendingHoldRequests"
.Vb 1
\&  my $biblionumber_aref = GetBibsWithPendingHoldRequests();
.Ve
.PP
Return an arrayref of the biblionumbers of all bibs
that have one or more unfilled hold requests.
.SS "GetPendingHoldRequestsForBib"
.IX Subsection "GetPendingHoldRequestsForBib"
.Vb 1
\&  my $requests = GetPendingHoldRequestsForBib($biblionumber);
.Ve
.PP
Returns an arrayref of hashrefs to pending, unfilled hold requests
on the bib identified by \f(CW$biblionumber\fR.  The following keys
are present in each hashref:
.PP
.Vb 8
\&    biblionumber
\&    borrowernumber
\&    itemnumber
\&    priority
\&    branchcode
\&    reservedate
\&    reservenotes
\&    borrowerbranch
.Ve
.PP
The arrayref is sorted in order of increasing priority.
.SS "GetItemsAvailableToFillHoldRequestsForBib"
.IX Subsection "GetItemsAvailableToFillHoldRequestsForBib"
.Vb 1
\&  my $available_items = GetItemsAvailableToFillHoldRequestsForBib($biblionumber, $branches_ar);
.Ve
.PP
Returns an arrayref of items available to fill hold requests
for the bib identified by \f(CW$biblionumber\fR.  An item is available
to fill a hold request if and only if:
.PP
.Vb 7
\&    * it is not on loan
\&    * it is not withdrawn
\&    * it is not marked notforloan
\&    * it is not currently in transit
\&    * it is not lost
\&    * it is not sitting on the hold shelf
\&    * it is not damaged (unless AllowHoldsOnDamagedItems is on)
.Ve
.SS "MapItemsToHoldRequests"
.IX Subsection "MapItemsToHoldRequests"
.Vb 1
\&  MapItemsToHoldRequests($hold_requests, $available_items, $branches, $transport_cost_matrix)
.Ve
.SS "CreatePickListFromItemMap"
.IX Subsection "CreatePickListFromItemMap"
.SS "AddToHoldTargetMap"
.IX Subsection "AddToHoldTargetMap"
