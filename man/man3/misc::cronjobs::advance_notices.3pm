.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "misc::cronjobs::advance_notices 3"
.TH misc::cronjobs::advance_notices 3 "2015-11-02" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
advance_notices.pl \- cron script to put item due reminders into message queue
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&./advance_notices.pl \-c
.PP
or, in crontab:
0 1 * * * advance_notices.pl \-c
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script prepares pre-due and item due reminders to be sent to
patrons. It queues them in the message queue, which is processed by
the process_message_queue.pl cronjob. The type and timing of the
messages can be configured by the patrons in their \*(L"My Alerts\*(R" tab in
the \s-1OPAC\s0.
.SH "NAME"
advance_notices.pl \- prepare messages to be sent to patrons for nearly due, or due, items
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
advance_notices.pl
  [ \-n ][ \-m <number of days> ][ \-\-itemscontent <comma separated field list> ][ \-c ]
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-\-help\fR" 8
.IX Item "--help"
Print a brief help message and exits.
.IP "\fB\-\-man\fR" 8
.IX Item "--man"
Prints the manual page and exits.
.IP "\fB\-v\fR" 8
.IX Item "-v"
Verbose. Without this flag set, only fatal errors are reported.
.IP "\fB\-n\fR" 8
.IX Item "-n"
Do not send any email. Advanced or due notices that would have been sent to
the patrons are printed to standard out.
.IP "\fB\-m\fR" 8
.IX Item "-m"
Defines the maximum number of days in advance to send advance notices.
.IP "\fB\-c\fR" 8
.IX Item "-c"
Confirm flag: Add this option. The script will only print a usage
statement otherwise.
.IP "\fB\-\-itemscontent\fR" 8
.IX Item "--itemscontent"
comma separated list of fields that get substituted into templates in
places of the <<items.content>> placeholder. This
defaults to due date,title,author,barcode
.Sp
Other possible values come from fields in the biblios, items and
issues tables.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script is designed to alert patrons when items are due, or coming due
.SS "Configuration"
.IX Subsection "Configuration"
This script pays attention to the advanced notice configuration
performed by borrowers in the \s-1OPAC\s0, or by staff in the patron detail page of the intranet. The content of the messages is configured in Tools \-> Notices and slips. Advanced notices use the \s-1PREDUE\s0 template, due notices use \s-1DUE\s0. More information about the use of this
section of Koha is available in the Koha manual.
.SS "Outgoing emails"
.IX Subsection "Outgoing emails"
Typically, messages are prepared for each patron with due
items, and who have selected (or the library has elected for them) Advance or Due notices.
.PP
These emails are staged in the outgoing message queue, as are messages
produced by other features of Koha. This message queue must be
processed regularly by the
\&\fImisc/cronjobs/process_message_queue.pl\fR program.
.PP
In the event that the \f(CW\*(C`\-n\*(C'\fR flag is passed to this program, no emails
are sent. Instead, messages are sent on standard output from this
program. They may be redirected to a file if desired.
.SS "Templates"
.IX Subsection "Templates"
Templates can contain variables enclosed in double angle brackets like
<<this>>. Those variables will be replaced with values
specific to the overdue items or relevant patron. Available variables
are:
.IP "<<items.content>>" 4
.IX Item "<<items.content>>"
one line for each item, each line containing a tab separated list of
title, author, barcode, issuedate
.IP "<<borrowers.*>>" 4
.IX Item "<<borrowers.*>>"
any field from the borrowers table
.IP "<<branches.*>>" 4
.IX Item "<<branches.*>>"
any field from the branches table
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fImisc/cronjobs/overdue_notices.pl\fR program allows you to send
messages to patrons when their messages are overdue.
.SH "METHODS"
.IX Header "METHODS"
.SS "parse_letter"
.IX Subsection "parse_letter"
.SS "get_branch_info"
.IX Subsection "get_branch_info"
