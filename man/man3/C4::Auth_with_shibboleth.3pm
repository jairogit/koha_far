.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\" ========================================================================
.\"
.IX Title "C4::Auth_with_shibboleth 3"
.TH C4::Auth_with_shibboleth 3 "2015-11-02" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
C4::Auth_with_shibboleth
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use C4::Auth_with_shibboleth;
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is specific to Shibboleth authentication in koha and relies heavily upon the native shibboleth service provider package in your operating system.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
To use this type of authentication these additional packages are required:
.IP "\(bu" 4
libapache2\-mod\-shib2
.IP "\(bu" 4
libshibsp5:amd64
.IP "\(bu" 4
shibboleth\-sp2\-schemas
.PP
We let the native shibboleth service provider packages handle all the complexities of shibboleth negotiation for us, and configuring this is beyond the scope of this documentation.
.PP
But to sum up, to get shibboleth working in koha, as a minimum you will need to:
.IP "1." 4
Create some metadata for your koha instance (if you're in a single instance setup then the default metadata available at https://youraddress.com/Shibboleth.sso/Metadata should be adequate)
.IP "2." 4
Swap metadata with your Identidy Provider (IdP)
.IP "3." 4
Map their attributes to what you want to see in koha
.IP "4." 4
Tell apache that we wish to allow koha to authenticate via shibboleth.
.Sp
This is as simple as adding the below to your virtualhost config:
.Sp
.Vb 4
\& <Location />
\&   AuthType shibboleth
\&   Require shibboleth
\& </Location>
.Ve
.IP "5." 4
Configure koha to listen for shibboleth environment variables.
.Sp
This is as simple as enabling \fBuseshibboleth\fR in koha\-conf.xml:
.Sp
.Vb 1
\& <useshibboleth>1</useshibboleth>
.Ve
.IP "6." 4
Map shibboleth attributes to koha fields, and configure authentication match point in koha\-conf.xml.
.Sp
.Vb 6
\& <shibboleth>
\&   <matchpoint>userid<matchpoint> <!\-\- koha borrower field to match upon \-\->
\&   <mapping>
\&     <userid is="eduPersonID"></userid> <!\-\- koha borrower field to shibboleth attribute mapping \-\->
\&   </mapping>
\& </shibboleth>
.Ve
.Sp
Note: The minimum you need here is a <matchpoint> block, containing a valid column name from the koha borrowers table, and a <mapping> block containing a relation between the chosen matchpoint and the shibboleth attribute name.
.PP
It should be as simple as that; you should now be able to login via shibboleth in the opac.
.PP
If you need more help configuring your \fBS\fRervice \fBP\fRrovider to authenticate against a chosen \fBId\fRentity \fBP\fRrovider then it might be worth taking a look at the community wiki page <http://wiki.koha-community.org/wiki/Shibboleth_Configuration>
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "logout_shib"
.IX Subsection "logout_shib"
Sends a logout signal to the native shibboleth service provider and then logs out of koha.  Depending upon the native service provider configuration and identity provider capabilities this may or may not perform a single sign out action.
.PP
.Vb 1
\&  logout_shib($query);
.Ve
.SS "login_shib_url"
.IX Subsection "login_shib_url"
Given a query, this will return a shibboleth login url with return code to page with given given query.
.PP
.Vb 1
\&  my $shibLoginURL = login_shib_url($query);
.Ve
.SS "get_login_shib"
.IX Subsection "get_login_shib"
Returns the shibboleth login attribute should it be found present in the http session
.PP
.Vb 1
\&  my $shib_login = get_login_shib();
.Ve
.SS "checkpw_shib"
.IX Subsection "checkpw_shib"
Given a database handle and a shib_login attribute, this routine checks for a matching local user and if found returns true, their cardnumber and their userid.  If a match is not found, then this returns false.
.PP
.Vb 1
\&  my ( $retval, $retcard, $retuserid ) = C4::Auth_with_shibboleth::checkpw_shib( $shib_login );
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
